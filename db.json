{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/responsive-nav.css","path":"css/responsive-nav.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/nav-toggle.js","path":"js/nav-toggle.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/responsive-nav.js","path":"js/responsive-nav.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/selection.json","path":"fonts/icon-default/selection.json","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/selection.json","path":"fonts/icon-feather/selection.json","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","path":"fonts/icon-fifty-shades/selection.json","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","path":"fonts/icon-linecons/selection.json","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-nav/icomoon.eot","path":"fonts/icon-nav/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-nav/icomoon.svg","path":"fonts/icon-nav/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-nav/icomoon.ttf","path":"fonts/icon-nav/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/fonts/icon-nav/icomoon.woff","path":"fonts/icon-nav/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fbaa8154c2fd3a8f1b1e5c7c14b155a4f55a9f66","modified":1512029346000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1512028875000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1512028875000},{"_id":"themes/next/.gitignore","hash":"eace06f5c0ab3910d0ceae05900bf4964fe6fed5","modified":1512028875000},{"_id":"themes/next/.jshintrc","hash":"12c5e37da3432bee2219ed1c667076d54f1639c0","modified":1512028875000},{"_id":"themes/next/README.en.md","hash":"f54ed1eb4ce71b6fb2e406d112f6a291ab14aace","modified":1512112195000},{"_id":"themes/next/README.md","hash":"3319de8565699fc9642f76c41ee96b50f2234b6a","modified":1512028875000},{"_id":"themes/next/_config.yml","hash":"b7145bc01caa1b60cfd2466f65ae6fed9bb57096","modified":1512116459000},{"_id":"themes/next/bower.json","hash":"74a06e9de9e1fffa13ab9279d551789844bff4bc","modified":1512035433000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1512114456000},{"_id":"source/_posts/Xcode8 + Cocoapods + Swift2.3 适配.md","hash":"ec8398dfdc854d3bf8a4913bb03db61e83ab5be5","modified":1512114277000},{"_id":"source/_posts/iOS-持久化存储技术选型.md","hash":"b1901f5376a9ab08ce66e08f5efae664def249e5","modified":1512028875000},{"_id":"source/_posts/在iOS项目中导入React Native.md","hash":"f4c19893cc9c97ece5c81a6345a5cf9be5f75096","modified":1512114785000},{"_id":"source/_posts/我的Swift网络数据处理流.md","hash":"4fa414a06ac3683268c347f99e7a4fcc87e70df6","modified":1512115210000},{"_id":"source/_posts/自定义navigation controller过渡动画 2.md","hash":"fe3a1ea0890079e8a082f8555baa4dd86a7a7f37","modified":1512113694000},{"_id":"source/_posts/自定义navigation controller过渡动画.md","hash":"615393de2edbee5350b188a17e157dc7f6256898","modified":1512034908000},{"_id":"source/categories/index.md","hash":"55d93b47edbe2c8504803010fc0b940338601823","modified":1512028875000},{"_id":"source/about/index.md","hash":"f312a96292058fcff3d46378ef26488df5806439","modified":1512111997000},{"_id":"source/tags/index.md","hash":"fc87f95db862bdbff2352318d08e4526ea3cc440","modified":1512028875000},{"_id":"themes/next/languages/de.yml","hash":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1512028875000},{"_id":"themes/next/languages/default.yml","hash":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1512028875000},{"_id":"themes/next/languages/fr-FR.yml","hash":"6d097445342a9fb5235afea35d65bf5271b772f0","modified":1512028875000},{"_id":"themes/next/languages/en.yml","hash":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1512028875000},{"_id":"themes/next/languages/pt.yml","hash":"737225eee4b91f64db61742ce3f4ab4e8c039286","modified":1512028875000},{"_id":"themes/next/languages/ru.yml","hash":"b4a827b9ddac9d5f6dca096fe513aeafb46a3e93","modified":1512028875000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"8af76df5557561050a950bdd7091d3bb3939c5c0","modified":1512028875000},{"_id":"themes/next/languages/zh-hk.yml","hash":"3fc38103c9efa6f6c37149adbddb014ff85ec849","modified":1512028875000},{"_id":"themes/next/languages/zh-tw.yml","hash":"8897a06e521b36c7a1226c72057c8357611eded8","modified":1512028875000},{"_id":"themes/next/layout/_layout.swig","hash":"7b915c9799d035a0df3760d4bf65f5f4a0c38552","modified":1512116468000},{"_id":"themes/next/layout/archive.swig","hash":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1512028875000},{"_id":"themes/next/layout/category.swig","hash":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1512028875000},{"_id":"themes/next/layout/index.swig","hash":"43624bcf03288c3ed4133f0e2e00e9b7260047e3","modified":1512028875000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1512028875000},{"_id":"themes/next/layout/post.swig","hash":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1512028875000},{"_id":"themes/next/layout/tag.swig","hash":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1512028875000},{"_id":"themes/next/scripts/merge-configs.js","hash":"dfd147d1317e56d283f5e779f00608e913603b51","modified":1512028875000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1512028875000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1512028875000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1512028875000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b78ae5fab2b4029f90563ca988cc44111a61533c","modified":1512112035000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d8045367267e466ea3fcbcf9bcdda5dd0236d74b","modified":1512112385000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"070da31ffd3315605808d93250cc255dd1552b5b","modified":1512112320000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c77cca227794d24d9b5ef6a9f90ae52887e252ce","modified":1512112083000},{"_id":"themes/next/layout/_partials/head.swig","hash":"d4dd7f445273783ec015adb635c66c00e02a3f83","modified":1512116921000},{"_id":"themes/next/layout/_partials/header.swig","hash":"957999c1fbfc852a6d0a3808b99367110930d9dd","modified":1512112114000},{"_id":"themes/next/layout/_partials/old-browsers.swig","hash":"391642bb013c4084a4753d39aae273ced446c985","modified":1512112326000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1512028875000},{"_id":"themes/next/layout/_partials/search.swig","hash":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1512028875000},{"_id":"themes/next/layout/_scripts/analytics.swig","hash":"33ca06b9bd9a15a19432d5396b85bd319f017319","modified":1512028875000},{"_id":"themes/next/layout/_scripts/baidushare.swig","hash":"0ebd0d6594c35dcb6f655c6cc0611dfc340ae928","modified":1512112167000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","hash":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1512028875000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","hash":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1512028875000},{"_id":"themes/next/layout/_scripts/helpers.swig","hash":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1512028875000},{"_id":"themes/next/layout/_scripts/mathjax.swig","hash":"71ed9000ed62cfaf31d78bed9074461908c62efe","modified":1512112187000},{"_id":"themes/next/layout/_scripts/motion.swig","hash":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1512028875000},{"_id":"themes/next/layout/_scripts/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1512028875000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1512028875000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"6329dc1815721050fd4c24a8accd8f4cbdb52330","modified":1512028875000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1512028875000},{"_id":"themes/next/source/css/main.styl","hash":"b4819cff6423d9fa74c90ff08179471cd10b3eea","modified":1512116551000},{"_id":"themes/next/source/css/responsive-nav.css","hash":"779b567a213f2c852ca64844c707d38ddec07c13","modified":1512028875000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1512028875000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1512028875000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1512028875000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1512028875000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1512028875000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1512028875000},{"_id":"themes/next/source/images/avatar.png","hash":"b05ec31b2791aa47da000570c573ef52644a5480","modified":1512028875000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1512028875000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512028875000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512028875000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1512028875000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1512028875000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1512028875000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1512028875000},{"_id":"themes/next/source/js/fancy-box.js","hash":"62d38913d8e8a5736ecc48a0b343f67e86a0ae32","modified":1512028875000},{"_id":"themes/next/source/js/helpers.js","hash":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1512028875000},{"_id":"themes/next/source/js/hook-duoshuo.js","hash":"de3c14f49ac5f20b2065377dd1872749d067ebf9","modified":1512028875000},{"_id":"themes/next/source/js/lazyload.js","hash":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1512028875000},{"_id":"themes/next/source/js/motion_fallback.js","hash":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1512028875000},{"_id":"themes/next/source/js/motion_global.js","hash":"89cd590f8b95cf828cb153a256fdda6e3f4dfaa5","modified":1512028875000},{"_id":"themes/next/source/js/nav-toggle.js","hash":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1512028875000},{"_id":"themes/next/source/js/responsive-nav.js","hash":"a7bceeb6cb478dcf9fd1b90166eb0b777881a2ce","modified":1512028875000},{"_id":"themes/next/source/js/ua-parser.min.js","hash":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1512028875000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512028875000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512028875000},{"_id":"themes/next/source/css/_mixins/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512028875000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512028875000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512028875000},{"_id":"themes/next/source/images/favicon.ico","hash":"70d050a74864f0682bc1c42e216bd72b2efd3a7d","modified":1512117162000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1512028875000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1512028875000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"1868643531b2479acab5fa2986edc5fff965a13f","modified":1512028875000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8d703fef299ff2c9a4222888973a22bb68bebf5d","modified":1512112342000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1512028875000},{"_id":"themes/next/layout/_scripts/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1512028875000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1512028875000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1512028875000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1512116533000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"b63ef233886538f30ced60344ac15d25e5f3e0af","modified":1512028875000},{"_id":"themes/next/source/css/_custom/about.styl","hash":"2703a2adba2a09ac204b4b9156668d2006d55263","modified":1512028875000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"4d63af7be00522af3ded561ffd35240a52dc4cb9","modified":1512028875000},{"_id":"themes/next/source/css/_custom/response-nav.styl","hash":"ecabce833e1d1f84465fd6372ab1ff61f9072aab","modified":1512028875000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"9c1962e90fae8af4dd475ca503e203d2816b6d8f","modified":1512028875000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c80ca1d6d65d7167d7a5532470716c9f138d9500","modified":1512028875000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"112b8d86cf6cdc8208bc2c16ca43c2052f23636e","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","hash":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","hash":"7a9e0d56439682a34d6579b758ca350074ed8ae3","modified":1512112219000},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","hash":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","hash":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-default/selection.json","hash":"dc07c29f687315f9458f6b251c214768af865fb2","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","hash":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","hash":"c7bd6b8fc9b6d6adadfecf46e86f62d867731145","modified":1512112242000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","hash":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-feather/selection.json","hash":"06ea91e3f98ebe1080087acad4356802bc5b6ebf","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","hash":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","hash":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","hash":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","hash":"72fe82e1f3db52414eed706952d385af241cb196","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","hash":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","hash":"fdd09098d1c3688e2c88cf33fd51e76b383b6d7f","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","hash":"6f28b6cf630a6e67b3345273b36ba530f2836aec","modified":1512112249000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","hash":"808eaf7d61f7e67c76976265c885e79c36920f0b","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","hash":"db4ce25d31449ecc6685b32e145252103967bb5c","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","hash":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","hash":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","hash":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-nav/icomoon.eot","hash":"7d30074980ae8e3c4be711488ed87e336026632f","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-nav/icomoon.svg","hash":"75076bba3278257429ee995a8e9b14501b57b40e","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-nav/icomoon.ttf","hash":"9a5862aee230544d4e09227d805e4cb2339f5b3f","modified":1512028875000},{"_id":"themes/next/source/fonts/icon-nav/icomoon.woff","hash":"c8cb3e9f1a52b64e9fd769b6118c8e73dc384202","modified":1512028875000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1512028875000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1512028875000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1512028875000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1512028875000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1512028875000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1512028875000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1512028875000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1512028875000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1512028875000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1512028875000},{"_id":"themes/next/source/css/_common/_page/home.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512028875000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","hash":"712f6afe564aff97febf25ca3aec71a709825817","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","hash":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","hash":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/group-pictures.styl","hash":"1ee40743000173495728855f734081eb2b6167cc","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","hash":"7e0dd81e4105a7999853a78584880445946eff98","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","hash":"6750b61236eb359028da8f2c4765f7c89b03dc9a","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","hash":"d86cd13637634fe408646ec8d1fa1989f0498d31","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","hash":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/posts.styl","hash":"b11e8d54d46569b0e63c14567d24772be6d4fdd2","modified":1512028875000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1512028875000},{"_id":"themes/next/source/css/_common/_core/base.styl","hash":"473c90e1d1b91ff6caabe956b499255bb12bc7a8","modified":1512028875000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","hash":"d339d114e52a9abbc797ec236a8a770c29e288a6","modified":1512028875000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1512028875000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","hash":"169a1651248453cf8dab6368fc398e53a04ac7df","modified":1512028875000},{"_id":"themes/next/source/css/_common/_core/tables.styl","hash":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1512028875000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","hash":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1512028875000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","hash":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1512028875000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","hash":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1512028875000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","hash":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1512028875000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","hash":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1512028875000},{"_id":"themes/next/source/css/_common/_page/archive.styl","hash":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1512028875000},{"_id":"themes/next/source/css/_common/_page/categories.styl","hash":"ca3567758beed9527126efd998fe723212d1df99","modified":1512028875000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1512028875000},{"_id":"themes/next/source/css/_common/_section/body.styl","hash":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1512028875000},{"_id":"themes/next/source/css/_common/_section/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1512028875000},{"_id":"themes/next/source/css/_common/_section/header.styl","hash":"c23ce136ae34269b42547468b243aba7713d168e","modified":1512028875000},{"_id":"themes/next/source/css/_common/_section/layout.styl","hash":"b9226522f3b3f80044e77503be9f13daa0baef99","modified":1512028875000},{"_id":"themes/next/source/css/_common/_section/media.styl","hash":"eead38dd5fd0a16e48773095232a15fce25290fd","modified":1512028875000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","hash":"537ce39edb2c46349a9648497000ff8025f376e8","modified":1512112212000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"1631a430655eadb485574d1a9bedd49460988b11","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"b7366f28bd7902bfc1dce24f2bd5ae5439fb6e2f","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/default/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","hash":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1512028875000},{"_id":"themes/next/source/css/_schemes/default/index.styl","hash":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1512028875000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1512028875000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1512028875000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1512028875000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","hash":"9a8655c40d058ed8351b7f3d9419f34779862bb3","modified":1512028875000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1512028875000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1512028875000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1512028875000},{"_id":"public/baidusitemap.xml","hash":"3f1917474345c8b01f214eb1f663dc0e215399c5","modified":1512116807303},{"_id":"public/sitemap.xml","hash":"e5bb366c32251ae1884038975d935354b9546684","modified":1512116807307},{"_id":"public/categories/index.html","hash":"8acbe8e798e0dfdc73acc52f169ed0c200ef0a99","modified":1512116926557},{"_id":"public/about/index.html","hash":"f33cfcb9d77cda6196b4c69cd8d0e7fd2ba07d13","modified":1512116926557},{"_id":"public/tags/index.html","hash":"3c49802c57725b84344280a8421b5c1f6b322a1c","modified":1512116926557},{"_id":"public/2016/09/22/xcode8+swift2.3.html","hash":"0a4139afa53b1eebc1a293d25c49ea51c47c113e","modified":1512116926557},{"_id":"public/2016/08/02/swift-network-flow.html","hash":"a40dc89cf7204d16aa13a0e7aa501f965ffff27f","modified":1512116926557},{"_id":"public/2016/04/05/react-native-in-iOS.html","hash":"a98b7e01de687dc6a8b83ccdd37322839cd744a2","modified":1512116926557},{"_id":"public/2016/02/22/iOS-endorance-storage.html","hash":"dc67c77a75b45faee09f0e6b2a8416ddb31ea2d4","modified":1512116926557},{"_id":"public/2016/02/18/custom_navigation_transition_2.html","hash":"15280e36c1098af895dfa666f16e1d277d3c79f9","modified":1512116926557},{"_id":"public/2016/02/01/custom_navigation_transition.html","hash":"0bd6052261c93335f26e1bdc0575021a7b19deaf","modified":1512116926557},{"_id":"public/archives/index.html","hash":"c8f5e2b81afd89bac22cc246f5cd433f64f04ef4","modified":1512116926557},{"_id":"public/archives/2016/index.html","hash":"53f2bf5d5bbc562ec68ca8149062d5e06f3e7b25","modified":1512116926557},{"_id":"public/archives/2016/02/index.html","hash":"ff19b7def0784e20d3b1a28a7c25b7178c312274","modified":1512116926557},{"_id":"public/archives/2016/04/index.html","hash":"3ab1b6bc587ce5be681c4dc9ccc8b3c0c78794a5","modified":1512116926557},{"_id":"public/archives/2016/08/index.html","hash":"6022db43fb106514eef470c27ef8cff048c1667f","modified":1512116926557},{"_id":"public/archives/2016/09/index.html","hash":"06102c85c277dbf5f764d5688007c81ac8867578","modified":1512116926557},{"_id":"public/categories/iOS/index.html","hash":"12f25b691d0fa89c086c5dde501f2604f7a6ddb4","modified":1512116926557},{"_id":"public/categories/React-Native/index.html","hash":"0ef8b833399b6fbdf8fe8f140626975f1b944b29","modified":1512116926557},{"_id":"public/categories/Swift过渡指南/index.html","hash":"4685dd769ea7f8f8f451b1a5722f4b9715536bd3","modified":1512116926558},{"_id":"public/index.html","hash":"e5a80187527f95843612a793349096d542f63e06","modified":1512116926557},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1512116807333},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1512116807333},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1512116807333},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1512116807333},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1512116807334},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1512116807334},{"_id":"public/images/avatar.png","hash":"b05ec31b2791aa47da000570c573ef52644a5480","modified":1512116807334},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1512116807334},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512116807334},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512116807334},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1512116807334},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1512116807334},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1512116807334},{"_id":"public/fonts/icon-default/icomoon.eot","hash":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1512116807334},{"_id":"public/fonts/icon-default/icomoon.svg","hash":"7a9e0d56439682a34d6579b758ca350074ed8ae3","modified":1512116807334},{"_id":"public/fonts/icon-default/icomoon.woff","hash":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1512116807334},{"_id":"public/fonts/icon-default/icomoon.ttf","hash":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1512116807334},{"_id":"public/fonts/icon-feather/icomoon.eot","hash":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1512116807334},{"_id":"public/fonts/icon-feather/icomoon.woff","hash":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1512116807334},{"_id":"public/fonts/icon-feather/icomoon.svg","hash":"c7bd6b8fc9b6d6adadfecf46e86f62d867731145","modified":1512116807334},{"_id":"public/fonts/icon-feather/icomoon.ttf","hash":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1512116807334},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","hash":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1512116807334},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","hash":"72fe82e1f3db52414eed706952d385af241cb196","modified":1512116807334},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","hash":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d","modified":1512116807334},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","hash":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1512116807334},{"_id":"public/fonts/icon-icomoon/icomoon.svg","hash":"6f28b6cf630a6e67b3345273b36ba530f2836aec","modified":1512116807334},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1512116807334},{"_id":"public/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1512116807334},{"_id":"public/fonts/icon-linecons/icomoon.svg","hash":"808eaf7d61f7e67c76976265c885e79c36920f0b","modified":1512116807334},{"_id":"public/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1512116807334},{"_id":"public/fonts/icon-linecons/icomoon.eot","hash":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1512116807334},{"_id":"public/fonts/icon-linecons/icomoon.woff","hash":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1512116807334},{"_id":"public/fonts/icon-linecons/icomoon.ttf","hash":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1512116807334},{"_id":"public/fonts/icon-nav/icomoon.eot","hash":"7d30074980ae8e3c4be711488ed87e336026632f","modified":1512116807335},{"_id":"public/fonts/icon-nav/icomoon.svg","hash":"75076bba3278257429ee995a8e9b14501b57b40e","modified":1512116807335},{"_id":"public/fonts/icon-nav/icomoon.ttf","hash":"9a5862aee230544d4e09227d805e4cb2339f5b3f","modified":1512116807335},{"_id":"public/fonts/icon-nav/icomoon.woff","hash":"c8cb3e9f1a52b64e9fd769b6118c8e73dc384202","modified":1512116807335},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1512116807335},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1512116807335},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1512116807335},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1512116807335},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1512116807335},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1512116807335},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1512116807335},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1512116807335},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1512116807335},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1512116807335},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1512116807335},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1512116807724},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1512116807727},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1512116807728},{"_id":"public/images/favicon.ico","hash":"70d050a74864f0682bc1c42e216bd72b2efd3a7d","modified":1512117205731},{"_id":"public/css/responsive-nav.css","hash":"779b567a213f2c852ca64844c707d38ddec07c13","modified":1512116807731},{"_id":"public/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1512116807731},{"_id":"public/js/helpers.js","hash":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1512116807731},{"_id":"public/js/hook-duoshuo.js","hash":"c5db82a2549b6be51e58a69a6f1c2e5afef5a20e","modified":1512116807731},{"_id":"public/js/fancy-box.js","hash":"62d38913d8e8a5736ecc48a0b343f67e86a0ae32","modified":1512116807731},{"_id":"public/js/lazyload.js","hash":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1512116807731},{"_id":"public/js/motion_fallback.js","hash":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1512116807731},{"_id":"public/js/motion_global.js","hash":"89cd590f8b95cf828cb153a256fdda6e3f4dfaa5","modified":1512116807731},{"_id":"public/js/nav-toggle.js","hash":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1512116807731},{"_id":"public/js/ua-parser.min.js","hash":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1512116807731},{"_id":"public/fonts/icon-default/selection.json","hash":"ff1b9b78eced4d0368d14cc192ac67a0dd498593","modified":1512116807731},{"_id":"public/fonts/icon-feather/selection.json","hash":"d95a90b0d541e48b049902090c0d008ad92b4115","modified":1512116807731},{"_id":"public/fonts/icon-fifty-shades/selection.json","hash":"e5a5042e8e516b1d30fa3b1206d2c74921cec72b","modified":1512116807731},{"_id":"public/fonts/icon-linecons/selection.json","hash":"68da6ea1b3ab9355d42694bf5745071cdefa4a65","modified":1512116807731},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1512116807731},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1512116807731},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1512116807731},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1512116807731},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1512116807731},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1512116807732},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1512116807732},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1512116807732},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1512116807732},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1512116807732},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1512116807732},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1512116807732},{"_id":"public/css/main.css","hash":"55d00311067b43dee7d0ca0d0122a40e93f41514","modified":1512116807732},{"_id":"public/js/responsive-nav.js","hash":"a7bceeb6cb478dcf9fd1b90166eb0b777881a2ce","modified":1512116807732},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1512116807732},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1512116807732},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1512116807732},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1512116807732},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1512116807732},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1512116807732},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1512116807732},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1512116807732},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1512116807732},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1512116807732},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1512116807735}],"Category":[{"name":"iOS","_id":"cjannaz9z00041rnrb6v8wtbf"},{"name":"React Native","_id":"cjannazah000c1rnrg6ap1ct4"},{"name":"Swift过渡指南","_id":"cjannazai000f1rnr49l3322n"}],"Data":[],"Page":[{"title":"categories","date":"2016-02-01T07:48:22.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-02-01 15:48:22\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-11-30T08:01:15.000Z","path":"categories/index.html","layout":"page","_id":"cjannaz9s00011rnraio67mml","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2016-02-15T09:29:57.000Z","comments":0,"_content":"\n<body>\n\t<div class=\"about-card\">\n\t\t<div class=\"about-main\">\n\t\t\t<img class=\"about-header\" src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/avatar.JPG\" />\n\t\t\t<h1>I'm 谢许峰</h1>\n\t\t\t<div class=\"about-line\"></div>\n\t\t\t<div class=\"about-info\">\n\t\t\t\t<div class=\"about-skill\">\n\t\t\t\t<h3>Skill</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>iOS development</li>\n\t\t\t\t\t<li>Web development</li>\n\t\t\t\t\t<li>Server development</li>\n\t\t\t\t\t<li>UI design</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div class=\"about-lag\">\n\t\t\t\t<h3>Languages</h3>\n\t\t\t\t<p>Objective-c, Swift, Node.js, JavaScript, HTML, CSS</p>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"about-footer\">\n\t\t\t<p>Blog 基于 <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\">Hexo</a> <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\">Next</a></p>\n\t\t</div>\n\t\t</div>\n\n\n\t</div>\n</body>\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-02-15 17:29:57\ncomments: false\n---\n\n<body>\n\t<div class=\"about-card\">\n\t\t<div class=\"about-main\">\n\t\t\t<img class=\"about-header\" src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/avatar.JPG\" />\n\t\t\t<h1>I'm 谢许峰</h1>\n\t\t\t<div class=\"about-line\"></div>\n\t\t\t<div class=\"about-info\">\n\t\t\t\t<div class=\"about-skill\">\n\t\t\t\t<h3>Skill</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>iOS development</li>\n\t\t\t\t\t<li>Web development</li>\n\t\t\t\t\t<li>Server development</li>\n\t\t\t\t\t<li>UI design</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div class=\"about-lag\">\n\t\t\t\t<h3>Languages</h3>\n\t\t\t\t<p>Objective-c, Swift, Node.js, JavaScript, HTML, CSS</p>\n\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"about-footer\">\n\t\t\t<p>Blog 基于 <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\">Hexo</a> <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\">Next</a></p>\n\t\t</div>\n\t\t</div>\n\n\n\t</div>\n</body>\n","updated":"2017-12-01T07:06:37.000Z","path":"about/index.html","layout":"page","_id":"cjannaz9w00031rnr3wqlp0ir","content":"<body><br>    <div class=\"about-card\"><br>        <div class=\"about-main\"><br>            <img class=\"about-header\" src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/avatar.JPG\"><br>            <h1>I’m 谢许峰</h1><br>            <div class=\"about-line\"></div><br>            <div class=\"about-info\"><br>                <div class=\"about-skill\"><br>                <h3>Skill</h3><br>                <ul><br>                    <li>iOS development</li><br>                    <li>Web development</li><br>                    <li>Server development</li><br>                    <li>UI design</li><br>                </ul><br>            </div><br>            <div class=\"about-lag\"><br>                <h3>Languages</h3><br>                <p>Objective-c, Swift, Node.js, JavaScript, HTML, CSS</p><br>            </div><br>            </div><br><br>            <div class=\"about-footer\"><br>            <p>Blog 基于 <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\">Hexo</a> <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\">Next</a></p><br>        </div><br>        </div><br><br><br>    </div><br></body>\n","site":{"data":{}},"excerpt":"","more":"<body><br>    <div class=\"about-card\"><br>        <div class=\"about-main\"><br>            <img class=\"about-header\" src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/avatar.JPG\"><br>            <h1>I’m 谢许峰</h1><br>            <div class=\"about-line\"></div><br>            <div class=\"about-info\"><br>                <div class=\"about-skill\"><br>                <h3>Skill</h3><br>                <ul><br>                    <li>iOS development</li><br>                    <li>Web development</li><br>                    <li>Server development</li><br>                    <li>UI design</li><br>                </ul><br>            </div><br>            <div class=\"about-lag\"><br>                <h3>Languages</h3><br>                <p>Objective-c, Swift, Node.js, JavaScript, HTML, CSS</p><br>            </div><br>            </div><br><br>            <div class=\"about-footer\"><br>            <p>Blog 基于 <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\">Hexo</a> <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\">Next</a></p><br>        </div><br>        </div><br><br><br>    </div><br></body>\n"},{"title":"tags","date":"2016-02-01T07:42:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-02-01 15:42:37\ntype: \"tags\"\n---\n","updated":"2017-11-30T08:01:15.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjannaza500061rnrwwxjxqib","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Xcode8 + Cocoapods + Swift2.3 适配","date":"2016-09-22T04:23:05.000Z","_content":"\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_cover.png)\n\nXcode8 GM + Swift3发布，影响最大的就是一直以来使用Swift2.3开发，包含各种依赖lib的成熟项目，虽然Xcode8提供了一键Swift2.3 convert Swift3的选项，但是转换完成后几百个error也是常事。所以，在Xcode8下继续使用Swift2.3开发是简便快速的方式。\n<!-- more -->\n\n### 项目适配\n1.升级完Xcode8之后，老项目打开之后，会弹出转换到Swift3的提示，两次点击`Later`忽略它\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_convert.png)\n\n> 可以通过 Edit -> Convert -> To Current Swift Syntax... 来手动转换到Swift3\n\n2.通过将Build Settings里的`Use Legacy Swift Language Version`设置为Yes，限定项目的Swift版本为2.3\n\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_swift_version.png)\n\n### Cocoapods适配\n我们可以使用上面的方式，同样将`Pods`project的`Use Legacy Swift Language Version`设置为Yes，老的项目就能够在Xcode8下以Swift2.3运行了。\n但是重新运行`pod install`或`pod update`安装(更新)pods后，`Pods`project的`Use Legacy Swift Language Version`会被重置，我们可以通过pod钩子的方式，自动设置swift版本\n在`Podfile`文件头部，加入代码\n\n``` ruby\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['SWIFT_VERSION'] = '2.3'\n    end\n  end\nend\n```\n再次运行`pod install`后，所有的Swift依赖都会被限定为Swift2.3版本运行。\n\n\n### End\n继续使用Swift2.3只是权宜之策，待各类小问题解决之后，Swift3必然是大势所趋。\n* 项目代码不是适配Swift3的难点，重点是三方框架\n* 某些框架的Swift3存在小问题，比如Alamofire，支持Swift3的release 4.0，设备要求是iOS9+，对于项目来说几乎是不可接受的\n* Cocoapods和项目project中的`Use Legacy Swift Language Version`，需要保持相同的设置\n* Swift2.3和Swift3的代码不可以混用\n","source":"_posts/Xcode8 + Cocoapods + Swift2.3 适配.md","raw":"---\ntitle: Xcode8 + Cocoapods + Swift2.3 适配\ndate: 2016-09-22 12:23:05\ncategories: iOS\npermalink: xcode8+swift2.3\n---\n\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_cover.png)\n\nXcode8 GM + Swift3发布，影响最大的就是一直以来使用Swift2.3开发，包含各种依赖lib的成熟项目，虽然Xcode8提供了一键Swift2.3 convert Swift3的选项，但是转换完成后几百个error也是常事。所以，在Xcode8下继续使用Swift2.3开发是简便快速的方式。\n<!-- more -->\n\n### 项目适配\n1.升级完Xcode8之后，老项目打开之后，会弹出转换到Swift3的提示，两次点击`Later`忽略它\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_convert.png)\n\n> 可以通过 Edit -> Convert -> To Current Swift Syntax... 来手动转换到Swift3\n\n2.通过将Build Settings里的`Use Legacy Swift Language Version`设置为Yes，限定项目的Swift版本为2.3\n\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_swift_version.png)\n\n### Cocoapods适配\n我们可以使用上面的方式，同样将`Pods`project的`Use Legacy Swift Language Version`设置为Yes，老的项目就能够在Xcode8下以Swift2.3运行了。\n但是重新运行`pod install`或`pod update`安装(更新)pods后，`Pods`project的`Use Legacy Swift Language Version`会被重置，我们可以通过pod钩子的方式，自动设置swift版本\n在`Podfile`文件头部，加入代码\n\n``` ruby\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['SWIFT_VERSION'] = '2.3'\n    end\n  end\nend\n```\n再次运行`pod install`后，所有的Swift依赖都会被限定为Swift2.3版本运行。\n\n\n### End\n继续使用Swift2.3只是权宜之策，待各类小问题解决之后，Swift3必然是大势所趋。\n* 项目代码不是适配Swift3的难点，重点是三方框架\n* 某些框架的Swift3存在小问题，比如Alamofire，支持Swift3的release 4.0，设备要求是iOS9+，对于项目来说几乎是不可接受的\n* Cocoapods和项目project中的`Use Legacy Swift Language Version`，需要保持相同的设置\n* Swift2.3和Swift3的代码不可以混用\n","slug":"xcode8+swift2.3","published":1,"updated":"2017-12-01T07:44:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjannaz9o00001rnru42uyupy","content":"<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_cover.png\" alt=\"Alt text\"></p>\n<p>Xcode8 GM + Swift3发布，影响最大的就是一直以来使用Swift2.3开发，包含各种依赖lib的成熟项目，虽然Xcode8提供了一键Swift2.3 convert Swift3的选项，但是转换完成后几百个error也是常事。所以，在Xcode8下继续使用Swift2.3开发是简便快速的方式。<br><a id=\"more\"></a></p>\n<h3 id=\"项目适配\"><a href=\"#项目适配\" class=\"headerlink\" title=\"项目适配\"></a>项目适配</h3><p>1.升级完Xcode8之后，老项目打开之后，会弹出转换到Swift3的提示，两次点击<code>Later</code>忽略它<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_convert.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>可以通过 Edit -&gt; Convert -&gt; To Current Swift Syntax… 来手动转换到Swift3</p>\n</blockquote>\n<p>2.通过将Build Settings里的<code>Use Legacy Swift Language Version</code>设置为Yes，限定项目的Swift版本为2.3</p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_swift_version.png\" alt=\"Alt text\"></p>\n<h3 id=\"Cocoapods适配\"><a href=\"#Cocoapods适配\" class=\"headerlink\" title=\"Cocoapods适配\"></a>Cocoapods适配</h3><p>我们可以使用上面的方式，同样将<code>Pods</code>project的<code>Use Legacy Swift Language Version</code>设置为Yes，老的项目就能够在Xcode8下以Swift2.3运行了。<br>但是重新运行<code>pod install</code>或<code>pod update</code>安装(更新)pods后，<code>Pods</code>project的<code>Use Legacy Swift Language Version</code>会被重置，我们可以通过pod钩子的方式，自动设置swift版本<br>在<code>Podfile</code>文件头部，加入代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install <span class=\"keyword\">do</span> <span class=\"params\">|installer|</span></span><br><span class=\"line\">  installer.pods_project.targets.each <span class=\"keyword\">do</span> <span class=\"params\">|target|</span></span><br><span class=\"line\">    target.build_configurations.each <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">      config.build_settings[<span class=\"string\">'SWIFT_VERSION'</span>] = <span class=\"string\">'2.3'</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>再次运行<code>pod install</code>后，所有的Swift依赖都会被限定为Swift2.3版本运行。</p>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3><p>继续使用Swift2.3只是权宜之策，待各类小问题解决之后，Swift3必然是大势所趋。</p>\n<ul>\n<li>项目代码不是适配Swift3的难点，重点是三方框架</li>\n<li>某些框架的Swift3存在小问题，比如Alamofire，支持Swift3的release 4.0，设备要求是iOS9+，对于项目来说几乎是不可接受的</li>\n<li>Cocoapods和项目project中的<code>Use Legacy Swift Language Version</code>，需要保持相同的设置</li>\n<li>Swift2.3和Swift3的代码不可以混用</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_cover.png\" alt=\"Alt text\"></p>\n<p>Xcode8 GM + Swift3发布，影响最大的就是一直以来使用Swift2.3开发，包含各种依赖lib的成熟项目，虽然Xcode8提供了一键Swift2.3 convert Swift3的选项，但是转换完成后几百个error也是常事。所以，在Xcode8下继续使用Swift2.3开发是简便快速的方式。<br>","more":"</p>\n<h3 id=\"项目适配\"><a href=\"#项目适配\" class=\"headerlink\" title=\"项目适配\"></a>项目适配</h3><p>1.升级完Xcode8之后，老项目打开之后，会弹出转换到Swift3的提示，两次点击<code>Later</code>忽略它<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_convert.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p>可以通过 Edit -&gt; Convert -&gt; To Current Swift Syntax… 来手动转换到Swift3</p>\n</blockquote>\n<p>2.通过将Build Settings里的<code>Use Legacy Swift Language Version</code>设置为Yes，限定项目的Swift版本为2.3</p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/xcode8_swift2.3/xcode8_swift2.3_swift_version.png\" alt=\"Alt text\"></p>\n<h3 id=\"Cocoapods适配\"><a href=\"#Cocoapods适配\" class=\"headerlink\" title=\"Cocoapods适配\"></a>Cocoapods适配</h3><p>我们可以使用上面的方式，同样将<code>Pods</code>project的<code>Use Legacy Swift Language Version</code>设置为Yes，老的项目就能够在Xcode8下以Swift2.3运行了。<br>但是重新运行<code>pod install</code>或<code>pod update</code>安装(更新)pods后，<code>Pods</code>project的<code>Use Legacy Swift Language Version</code>会被重置，我们可以通过pod钩子的方式，自动设置swift版本<br>在<code>Podfile</code>文件头部，加入代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install <span class=\"keyword\">do</span> <span class=\"params\">|installer|</span></span><br><span class=\"line\">  installer.pods_project.targets.each <span class=\"keyword\">do</span> <span class=\"params\">|target|</span></span><br><span class=\"line\">    target.build_configurations.each <span class=\"keyword\">do</span> <span class=\"params\">|config|</span></span><br><span class=\"line\">      config.build_settings[<span class=\"string\">'SWIFT_VERSION'</span>] = <span class=\"string\">'2.3'</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>再次运行<code>pod install</code>后，所有的Swift依赖都会被限定为Swift2.3版本运行。</p>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3><p>继续使用Swift2.3只是权宜之策，待各类小问题解决之后，Swift3必然是大势所趋。</p>\n<ul>\n<li>项目代码不是适配Swift3的难点，重点是三方框架</li>\n<li>某些框架的Swift3存在小问题，比如Alamofire，支持Swift3的release 4.0，设备要求是iOS9+，对于项目来说几乎是不可接受的</li>\n<li>Cocoapods和项目project中的<code>Use Legacy Swift Language Version</code>，需要保持相同的设置</li>\n<li>Swift2.3和Swift3的代码不可以混用</li>\n</ul>"},{"title":"iOS-持久化存储技术选型","date":"2016-02-22T08:23:05.000Z","_content":"\niOS有一道经典的面试题：数据的持久化存储有哪些方式？\n标准答案：常见的持久化存储方法有NSUserDefaults、plist、归档存文件、sqlite、CoreData已经新兴的Realm\n这样的答案对付面试官应该是够了，而实际运用中，你真的能搞清这些技术面向的场景么？\n<!-- more -->\n\n---\n### 技术分类\n* 偏好设置\n偏好设置是最简单的归档方式，适合存储简单的配置条目。使用NSUserDefaults单例就可以存储一些可序列化的类，通过keyValue的方式写入和读取，偏好设置实际上是一个plist文件\n* plist文件、归档\nplist和归档都是将对象整体保存到文件内\niOS开发里，plist随处可见，它比较像是json的表格可视化文件，能够存储一些可序列化的类型，如下\n``` swift\nNSArray;\nNSMutableArray;\nNSDictionary;\nNSMutableDictionary;\nNSData;\nNSMutableData;\nNSString;\nNSMutableString;\nNSNumber;\nNSDate;\n```\n  归档能够将遵守`NSCoding`协议的对象整体打包保存到文件里，从文件里解档读出的对象也可直接使用\n* sqlite、CoreData、Realm\n这三类都属于数据库存储，除了能够将数据逐条保存下来，最大的优势就是能够查询。当然，这三类数据库都有着自己的学习曲线，每个都需要一定的时间去掌握\n\n### 需求及技术分析\n技术应当紧紧围绕需求，根据不同的用途选择最匹配的方式，很重要！！！（这波给几分🐵）\n简单举几例，来说明在实际项目中，各存储方式的应用场景\n* 偏好设置\n用户的设置：例如字体大小、音乐播放的码率之类的简单数据，APP是否是第一次登陆、版本号等程序需要的参数\n* plist文件、归档\n比如某商品推荐APP，需求希望缓存10个商品，避免网络加载时显示空白。最简便的方法就是将10个商品的模型放进数组，一次性打包成data保存到文件里，需要的时候直接解档就可以使用\n* sqlite、CoreData、Realm\n数据库最大的存储优势其实就在于查询，能想到最需要数据库本地存储，就是TODO List类的APP，需要存储各种事务安排，并且能够分类排序查询\n\n---\n### 真·干货 ------ [TTLite](https://github.com/TifaTsubasa/TTLite)\n在实际的iOS开发中，复杂的本地存储场景是非常少的。很多时候，业务逻辑根本还没有到达需要花大量时间去研究数据库的程度，那么什么样的思路能够满足常见的存储要求呢？\n**轻查询、重存储、易学习且使用方便**\n\n> #### 介绍\nTTLite基于SQLite存储，使用FDMB提供的事务进行数据操作，封装了大量的sql语句，将建表、插入、删除、查询等操作封装成更加面对对象的方法，可以直接操作模型对象，整存整取，方便使用\n\n---\n**数据库是软件开发里非常重要的一环，在时间允许的情况下，认真研究一门数据库还是非常重要的 ^.^**\n\n---\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n![](http://7xq01t.com1.z0.glb.clouddn.com/2016-02-16-1444295065.png)\n","source":"_posts/iOS-持久化存储技术选型.md","raw":"---\ntitle: iOS-持久化存储技术选型\ndate: 2016-02-22 16:23:05\ncategories: iOS\npermalink: iOS-endorance-storage\n---\n\niOS有一道经典的面试题：数据的持久化存储有哪些方式？\n标准答案：常见的持久化存储方法有NSUserDefaults、plist、归档存文件、sqlite、CoreData已经新兴的Realm\n这样的答案对付面试官应该是够了，而实际运用中，你真的能搞清这些技术面向的场景么？\n<!-- more -->\n\n---\n### 技术分类\n* 偏好设置\n偏好设置是最简单的归档方式，适合存储简单的配置条目。使用NSUserDefaults单例就可以存储一些可序列化的类，通过keyValue的方式写入和读取，偏好设置实际上是一个plist文件\n* plist文件、归档\nplist和归档都是将对象整体保存到文件内\niOS开发里，plist随处可见，它比较像是json的表格可视化文件，能够存储一些可序列化的类型，如下\n``` swift\nNSArray;\nNSMutableArray;\nNSDictionary;\nNSMutableDictionary;\nNSData;\nNSMutableData;\nNSString;\nNSMutableString;\nNSNumber;\nNSDate;\n```\n  归档能够将遵守`NSCoding`协议的对象整体打包保存到文件里，从文件里解档读出的对象也可直接使用\n* sqlite、CoreData、Realm\n这三类都属于数据库存储，除了能够将数据逐条保存下来，最大的优势就是能够查询。当然，这三类数据库都有着自己的学习曲线，每个都需要一定的时间去掌握\n\n### 需求及技术分析\n技术应当紧紧围绕需求，根据不同的用途选择最匹配的方式，很重要！！！（这波给几分🐵）\n简单举几例，来说明在实际项目中，各存储方式的应用场景\n* 偏好设置\n用户的设置：例如字体大小、音乐播放的码率之类的简单数据，APP是否是第一次登陆、版本号等程序需要的参数\n* plist文件、归档\n比如某商品推荐APP，需求希望缓存10个商品，避免网络加载时显示空白。最简便的方法就是将10个商品的模型放进数组，一次性打包成data保存到文件里，需要的时候直接解档就可以使用\n* sqlite、CoreData、Realm\n数据库最大的存储优势其实就在于查询，能想到最需要数据库本地存储，就是TODO List类的APP，需要存储各种事务安排，并且能够分类排序查询\n\n---\n### 真·干货 ------ [TTLite](https://github.com/TifaTsubasa/TTLite)\n在实际的iOS开发中，复杂的本地存储场景是非常少的。很多时候，业务逻辑根本还没有到达需要花大量时间去研究数据库的程度，那么什么样的思路能够满足常见的存储要求呢？\n**轻查询、重存储、易学习且使用方便**\n\n> #### 介绍\nTTLite基于SQLite存储，使用FDMB提供的事务进行数据操作，封装了大量的sql语句，将建表、插入、删除、查询等操作封装成更加面对对象的方法，可以直接操作模型对象，整存整取，方便使用\n\n---\n**数据库是软件开发里非常重要的一环，在时间允许的情况下，认真研究一门数据库还是非常重要的 ^.^**\n\n---\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n![](http://7xq01t.com1.z0.glb.clouddn.com/2016-02-16-1444295065.png)\n","slug":"iOS-endorance-storage","published":1,"updated":"2017-11-30T08:01:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjannaz9v00021rnrmxuqmnp5","content":"<p>iOS有一道经典的面试题：数据的持久化存储有哪些方式？<br>标准答案：常见的持久化存储方法有NSUserDefaults、plist、归档存文件、sqlite、CoreData已经新兴的Realm<br>这样的答案对付面试官应该是够了，而实际运用中，你真的能搞清这些技术面向的场景么？<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"技术分类\"><a href=\"#技术分类\" class=\"headerlink\" title=\"技术分类\"></a>技术分类</h3><ul>\n<li>偏好设置<br>偏好设置是最简单的归档方式，适合存储简单的配置条目。使用NSUserDefaults单例就可以存储一些可序列化的类，通过keyValue的方式写入和读取，偏好设置实际上是一个plist文件</li>\n<li><p>plist文件、归档<br>plist和归档都是将对象整体保存到文件内<br>iOS开发里，plist随处可见，它比较像是json的表格可视化文件，能够存储一些可序列化的类型，如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSArray</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableArray</span>;</span><br><span class=\"line\"><span class=\"type\">NSDictionary</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableDictionary</span>;</span><br><span class=\"line\"><span class=\"type\">NSData</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableData</span>;</span><br><span class=\"line\"><span class=\"type\">NSString</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableString</span>;</span><br><span class=\"line\"><span class=\"type\">NSNumber</span>;</span><br><span class=\"line\"><span class=\"type\">NSDate</span>;</span><br></pre></td></tr></table></figure>\n<p>归档能够将遵守<code>NSCoding</code>协议的对象整体打包保存到文件里，从文件里解档读出的对象也可直接使用</p>\n</li>\n<li>sqlite、CoreData、Realm<br>这三类都属于数据库存储，除了能够将数据逐条保存下来，最大的优势就是能够查询。当然，这三类数据库都有着自己的学习曲线，每个都需要一定的时间去掌握</li>\n</ul>\n<h3 id=\"需求及技术分析\"><a href=\"#需求及技术分析\" class=\"headerlink\" title=\"需求及技术分析\"></a>需求及技术分析</h3><p>技术应当紧紧围绕需求，根据不同的用途选择最匹配的方式，很重要！！！（这波给几分🐵）<br>简单举几例，来说明在实际项目中，各存储方式的应用场景</p>\n<ul>\n<li>偏好设置<br>用户的设置：例如字体大小、音乐播放的码率之类的简单数据，APP是否是第一次登陆、版本号等程序需要的参数</li>\n<li>plist文件、归档<br>比如某商品推荐APP，需求希望缓存10个商品，避免网络加载时显示空白。最简便的方法就是将10个商品的模型放进数组，一次性打包成data保存到文件里，需要的时候直接解档就可以使用</li>\n<li>sqlite、CoreData、Realm<br>数据库最大的存储优势其实就在于查询，能想到最需要数据库本地存储，就是TODO List类的APP，需要存储各种事务安排，并且能够分类排序查询</li>\n</ul>\n<hr>\n<h3 id=\"真·干货-——-TTLite\"><a href=\"#真·干货-——-TTLite\" class=\"headerlink\" title=\"真·干货 —— TTLite\"></a>真·干货 —— <a href=\"https://github.com/TifaTsubasa/TTLite\" target=\"_blank\" rel=\"noopener\">TTLite</a></h3><p>在实际的iOS开发中，复杂的本地存储场景是非常少的。很多时候，业务逻辑根本还没有到达需要花大量时间去研究数据库的程度，那么什么样的思路能够满足常见的存储要求呢？<br><strong>轻查询、重存储、易学习且使用方便</strong></p>\n<blockquote>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>TTLite基于SQLite存储，使用FDMB提供的事务进行数据操作，封装了大量的sql语句，将建表、插入、删除、查询等操作封装成更加面对对象的方法，可以直接操作模型对象，整存整取，方便使用</p>\n</blockquote>\n<hr>\n<p><strong>数据库是软件开发里非常重要的一环，在时间允许的情况下，认真研究一门数据库还是非常重要的 ^.^</strong></p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a><br><img src=\"http://7xq01t.com1.z0.glb.clouddn.com/2016-02-16-1444295065.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>iOS有一道经典的面试题：数据的持久化存储有哪些方式？<br>标准答案：常见的持久化存储方法有NSUserDefaults、plist、归档存文件、sqlite、CoreData已经新兴的Realm<br>这样的答案对付面试官应该是够了，而实际运用中，你真的能搞清这些技术面向的场景么？<br>","more":"</p>\n<hr>\n<h3 id=\"技术分类\"><a href=\"#技术分类\" class=\"headerlink\" title=\"技术分类\"></a>技术分类</h3><ul>\n<li>偏好设置<br>偏好设置是最简单的归档方式，适合存储简单的配置条目。使用NSUserDefaults单例就可以存储一些可序列化的类，通过keyValue的方式写入和读取，偏好设置实际上是一个plist文件</li>\n<li><p>plist文件、归档<br>plist和归档都是将对象整体保存到文件内<br>iOS开发里，plist随处可见，它比较像是json的表格可视化文件，能够存储一些可序列化的类型，如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSArray</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableArray</span>;</span><br><span class=\"line\"><span class=\"type\">NSDictionary</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableDictionary</span>;</span><br><span class=\"line\"><span class=\"type\">NSData</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableData</span>;</span><br><span class=\"line\"><span class=\"type\">NSString</span>;</span><br><span class=\"line\"><span class=\"type\">NSMutableString</span>;</span><br><span class=\"line\"><span class=\"type\">NSNumber</span>;</span><br><span class=\"line\"><span class=\"type\">NSDate</span>;</span><br></pre></td></tr></table></figure>\n<p>归档能够将遵守<code>NSCoding</code>协议的对象整体打包保存到文件里，从文件里解档读出的对象也可直接使用</p>\n</li>\n<li>sqlite、CoreData、Realm<br>这三类都属于数据库存储，除了能够将数据逐条保存下来，最大的优势就是能够查询。当然，这三类数据库都有着自己的学习曲线，每个都需要一定的时间去掌握</li>\n</ul>\n<h3 id=\"需求及技术分析\"><a href=\"#需求及技术分析\" class=\"headerlink\" title=\"需求及技术分析\"></a>需求及技术分析</h3><p>技术应当紧紧围绕需求，根据不同的用途选择最匹配的方式，很重要！！！（这波给几分🐵）<br>简单举几例，来说明在实际项目中，各存储方式的应用场景</p>\n<ul>\n<li>偏好设置<br>用户的设置：例如字体大小、音乐播放的码率之类的简单数据，APP是否是第一次登陆、版本号等程序需要的参数</li>\n<li>plist文件、归档<br>比如某商品推荐APP，需求希望缓存10个商品，避免网络加载时显示空白。最简便的方法就是将10个商品的模型放进数组，一次性打包成data保存到文件里，需要的时候直接解档就可以使用</li>\n<li>sqlite、CoreData、Realm<br>数据库最大的存储优势其实就在于查询，能想到最需要数据库本地存储，就是TODO List类的APP，需要存储各种事务安排，并且能够分类排序查询</li>\n</ul>\n<hr>\n<h3 id=\"真·干货-——-TTLite\"><a href=\"#真·干货-——-TTLite\" class=\"headerlink\" title=\"真·干货 —— TTLite\"></a>真·干货 —— <a href=\"https://github.com/TifaTsubasa/TTLite\" target=\"_blank\" rel=\"noopener\">TTLite</a></h3><p>在实际的iOS开发中，复杂的本地存储场景是非常少的。很多时候，业务逻辑根本还没有到达需要花大量时间去研究数据库的程度，那么什么样的思路能够满足常见的存储要求呢？<br><strong>轻查询、重存储、易学习且使用方便</strong></p>\n<blockquote>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>TTLite基于SQLite存储，使用FDMB提供的事务进行数据操作，封装了大量的sql语句，将建表、插入、删除、查询等操作封装成更加面对对象的方法，可以直接操作模型对象，整存整取，方便使用</p>\n</blockquote>\n<hr>\n<p><strong>数据库是软件开发里非常重要的一环，在时间允许的情况下，认真研究一门数据库还是非常重要的 ^.^</strong></p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a><br><img src=\"http://7xq01t.com1.z0.glb.clouddn.com/2016-02-16-1444295065.png\" alt=\"\"></p>"},{"title":"在iOS项目中导入React Native","date":"2016-04-05T03:23:05.000Z","_content":"\nReact Native的势头越来越猛，但凡提及Native，皆是一片666，大有替代原生APP的趋势，也许Native有着大好形势，但目前看来，尚有太多不足。\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-logo)\n<!--more-->\n\n### 开始\n##### 在iOS原生项目中动态使用React Native定制界面\n如果你已经是一个iOS开发者，继续原生项目开发可能是更好的选择，而React Native，也许更加适合原生项目中部分动态页(例如广告、咨询详情)的编写，方便页面的多端重用和即时修改。\n[完整项目Github地址](https://github.com/TifaTsubasa/SimpleNative)\n\n#### 1.安装环境\n如果你之前只接触过iOS开发，使用终端也仅限于CocoaPods、Git，那么环境配置一定会费一番劲。\n* 安装Node.js\n\tNode.js官方下载：[https://nodejs.org/en/download/](https://nodejs.org/en/download/)\n\t在官网可以下载到对应系统的Node安装包，非常简单\n\t> 推荐使用nvm安装管理Node.js，能够更好的控制node的版本\n\tnvm github地址：[https://github.com/creationix/nvm](https://github.com/creationix/nvm)\n\t中文安装方法：[http://www.tuicool.com/articles/vmi6Zv7](http://www.tuicool.com/articles/vmi6Zv7)\n\t\n* 安装CocoaPods\n\tCocoaPods是iOS开发最常用的依赖管理工具\n\tCocoaPods安装使用方法：[唐巧blog](http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)\n\n#### 2.iOS原生项目\n我们需要准备一个简单的原生项目`SimpleNative`，选用的语言是**Swift**\n在`Main.storyboard`中初始化项目框架：导航控制器内有两层视图控制器，在第一层Controller中居中设置一个button用来push，第二层Controller空白待用\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-natigation.png)\n\n\n#### 3.初始化React Native的node依赖\n##### 1.初始化node\n在终端中，定位到iOS项目的根目录，运行\n`npm init`\n然后一路回车即可\n> 注意：node项目的命名不能使用大写字母，所以指定name时输入`simple-native` 后回车\n\n执行完毕之后，在项目根目录下生成了一个`package.json`文件，类似于CocoaPods的`Podfile`文件，用来管理项目依赖\n\n##### 2.安装React Native\n再项目根目录下运行\n`npm install --save react-native`\n> 由于国内的网络问题，npm安装比较缓慢，可以使用[淘宝npm镜像](http://npm.taobao.org/)替代\n\n安装完毕之后，根目录下会生成`node_modules`文件夹，里面保存了`react`和`react-native`的依赖\n`--save`参数会在`package.json`文件中保存`react`和`react-native`的依赖声明\n\n#### 4.初始化CocoaPods\n在项目根目录下，运行\n`pod init`\n在项目根目录下生成了`Podfile`，用任何编辑器打开，编写React Native的依赖\n``` ruby\nplatform :ios, '7.0'\n\ntarget 'SimpleNative' do\n  pod 'React', :path => './node_modules/react-native', :subspecs => [\n    'Core',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTText',\n    'RCTWebSocket',\n    # Add any other subspecs you want to use in your project\n  ]\nend\n\ntarget 'SimpleNativeTests' do\n\nend\n\ntarget 'SimpleNativeUITests' do\n\nend\n```\n在项目的target下，pod导入`React`，路径指向了当前目录下`'./node_modules/react-native'`，然后还有一堆乱七八糟的子依赖(一个都不能少！)\n运行`pod install`安装依赖，本地安装速度很快\n\n#### 5.绑定Native的视图\n##### 1.导入Native View\n由于使用的是Swift项目，我们需要一个OC-Swift桥接文件导入Native的类，在桥接文件夹导入\n`#import <RCTRootView.h>`\n\n##### 2.设置Native View\n点击`SimpleNative.xcworkspace`打开iOS项目，新建一个`ReactView`继承于UIView，并为这个view添加RCTRootView的子视图\n``` swift\nimport UIKit\n\nclass ReactView: UIView {\n    \n    weak var rootView: RCTRootView!\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        \n        let jsCodeLocation = NSURL(string: \"http://localhost:8081/index.ios.bundle?platform=ios\")\n        let rootView = RCTRootView(bundleURL: jsCodeLocation, moduleName: \"SimpleNative\", initialProperties: nil, launchOptions: nil)\n        self.rootView = rootView\n        self.addSubview(rootView)\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        rootView.frame = self.bounds\n    }\n}\n```\n然后在第二层控制器中居中显示一个View，并绑定为`ReactView`\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-react-view.png)\n\n再次运行项目，点击push按钮后，就会见到第一个红彤彤的Native错误了，但是这表示已经成功绑定了Native\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-error)\n\n#### 6.启动Native服务\n在ReactView的初始化中，我们为rootView指定了bundleURL和moduleName，其中moduleName既是当前项目名，而bundleURL，就要一步一步实现了，步步都是坑😓\n##### 1.新建index.ios.js\n在项目根目标下，新建ReactComponents文件夹，并在文件夹中新建`index.ios.js`文件，在js文件中\n写入react代码\n官方推荐的简单代码为\n``` javascript\n'use strict';\n\nimport React, {\n  Text,\n  View\n} from 'react-native';\n\nvar styles = React.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n});\n\nclass SimpleNative extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>This is a simple application.</Text>\n      </View>\n    )\n  }\n}\n\nReact.AppRegistry.registerComponent('SimpleNative', () => SimpleNative);\n```\n> 如果你希望显示一个更帅气的Native界面，可以拷贝链接代码：[Github搜索页](http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js)\n\n##### 2.启动node服务\n建好了js文件，需要启动一个端口为8081的服务将index.ios.js打包成index.ios.bundle\n在项目根目录下运行\n```\n(JS_DIR=`pwd`/ReactComponents; cd node_modules/react-native; npm run start -- --root $JS_DIR)\n```\n分解一下命令：\n1.将新建的ReactComponents文件夹目录赋值到JS_DIR上，注意需要是全路径！！！\n2.进入`node_modules/react-native`\n3.绑定`JS_DIR`会监听ReactComponents文件夹下的文件，然后`npm run start`启动native的node服务\n4.三行命令最好用()包装起来，可以避免运行后定位到`node_modules/react-native`文件夹下\n\n**再次运行iOS项目，当然也可以直接在模拟器上 Commend + R刷新，就会获得另一个错误。。。**\n~~~~~\n##### 3.开启Http支持\n苹果在iOS9之后默认关闭了对HTTP的支持，需要打开以访问localhost的服务\n在iOS项目的`Info.plist`文件中，加入\n``` xml\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSExceptionDomains</key>\n    <dict>\n        <key>localhost</key>\n        <dict>\n            <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>\n            <true/>\n        </dict>\n    </dict>\n</dict>\n```\n加入后，plist看起来是这样的\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-pllist)\n更多关于[App Transport Security](http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http)\n\n#### 7.最后\n重新运行iOS项目，点击push按钮后，在绿色加载条之后(第一次打包编译比较慢)，就能看到native的界面了，在搜索栏输入内容后回车，能够简单搜索Github内容（需要在index.ios.js添加[Github搜索页](http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js)代码）\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-github-search)\n\n如果将ReactView放置全屏显示，就更像一个原生的应用了 😉\n\n---\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n","source":"_posts/在iOS项目中导入React Native.md","raw":"---\ntitle: 在iOS项目中导入React Native\ndate: 2016-04-5 11:23:05\ncategories: React Native\npermalink: react-native-in-iOS\n---\n\nReact Native的势头越来越猛，但凡提及Native，皆是一片666，大有替代原生APP的趋势，也许Native有着大好形势，但目前看来，尚有太多不足。\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-logo)\n<!--more-->\n\n### 开始\n##### 在iOS原生项目中动态使用React Native定制界面\n如果你已经是一个iOS开发者，继续原生项目开发可能是更好的选择，而React Native，也许更加适合原生项目中部分动态页(例如广告、咨询详情)的编写，方便页面的多端重用和即时修改。\n[完整项目Github地址](https://github.com/TifaTsubasa/SimpleNative)\n\n#### 1.安装环境\n如果你之前只接触过iOS开发，使用终端也仅限于CocoaPods、Git，那么环境配置一定会费一番劲。\n* 安装Node.js\n\tNode.js官方下载：[https://nodejs.org/en/download/](https://nodejs.org/en/download/)\n\t在官网可以下载到对应系统的Node安装包，非常简单\n\t> 推荐使用nvm安装管理Node.js，能够更好的控制node的版本\n\tnvm github地址：[https://github.com/creationix/nvm](https://github.com/creationix/nvm)\n\t中文安装方法：[http://www.tuicool.com/articles/vmi6Zv7](http://www.tuicool.com/articles/vmi6Zv7)\n\t\n* 安装CocoaPods\n\tCocoaPods是iOS开发最常用的依赖管理工具\n\tCocoaPods安装使用方法：[唐巧blog](http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)\n\n#### 2.iOS原生项目\n我们需要准备一个简单的原生项目`SimpleNative`，选用的语言是**Swift**\n在`Main.storyboard`中初始化项目框架：导航控制器内有两层视图控制器，在第一层Controller中居中设置一个button用来push，第二层Controller空白待用\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-natigation.png)\n\n\n#### 3.初始化React Native的node依赖\n##### 1.初始化node\n在终端中，定位到iOS项目的根目录，运行\n`npm init`\n然后一路回车即可\n> 注意：node项目的命名不能使用大写字母，所以指定name时输入`simple-native` 后回车\n\n执行完毕之后，在项目根目录下生成了一个`package.json`文件，类似于CocoaPods的`Podfile`文件，用来管理项目依赖\n\n##### 2.安装React Native\n再项目根目录下运行\n`npm install --save react-native`\n> 由于国内的网络问题，npm安装比较缓慢，可以使用[淘宝npm镜像](http://npm.taobao.org/)替代\n\n安装完毕之后，根目录下会生成`node_modules`文件夹，里面保存了`react`和`react-native`的依赖\n`--save`参数会在`package.json`文件中保存`react`和`react-native`的依赖声明\n\n#### 4.初始化CocoaPods\n在项目根目录下，运行\n`pod init`\n在项目根目录下生成了`Podfile`，用任何编辑器打开，编写React Native的依赖\n``` ruby\nplatform :ios, '7.0'\n\ntarget 'SimpleNative' do\n  pod 'React', :path => './node_modules/react-native', :subspecs => [\n    'Core',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTText',\n    'RCTWebSocket',\n    # Add any other subspecs you want to use in your project\n  ]\nend\n\ntarget 'SimpleNativeTests' do\n\nend\n\ntarget 'SimpleNativeUITests' do\n\nend\n```\n在项目的target下，pod导入`React`，路径指向了当前目录下`'./node_modules/react-native'`，然后还有一堆乱七八糟的子依赖(一个都不能少！)\n运行`pod install`安装依赖，本地安装速度很快\n\n#### 5.绑定Native的视图\n##### 1.导入Native View\n由于使用的是Swift项目，我们需要一个OC-Swift桥接文件导入Native的类，在桥接文件夹导入\n`#import <RCTRootView.h>`\n\n##### 2.设置Native View\n点击`SimpleNative.xcworkspace`打开iOS项目，新建一个`ReactView`继承于UIView，并为这个view添加RCTRootView的子视图\n``` swift\nimport UIKit\n\nclass ReactView: UIView {\n    \n    weak var rootView: RCTRootView!\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        \n        let jsCodeLocation = NSURL(string: \"http://localhost:8081/index.ios.bundle?platform=ios\")\n        let rootView = RCTRootView(bundleURL: jsCodeLocation, moduleName: \"SimpleNative\", initialProperties: nil, launchOptions: nil)\n        self.rootView = rootView\n        self.addSubview(rootView)\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        rootView.frame = self.bounds\n    }\n}\n```\n然后在第二层控制器中居中显示一个View，并绑定为`ReactView`\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-react-view.png)\n\n再次运行项目，点击push按钮后，就会见到第一个红彤彤的Native错误了，但是这表示已经成功绑定了Native\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-error)\n\n#### 6.启动Native服务\n在ReactView的初始化中，我们为rootView指定了bundleURL和moduleName，其中moduleName既是当前项目名，而bundleURL，就要一步一步实现了，步步都是坑😓\n##### 1.新建index.ios.js\n在项目根目标下，新建ReactComponents文件夹，并在文件夹中新建`index.ios.js`文件，在js文件中\n写入react代码\n官方推荐的简单代码为\n``` javascript\n'use strict';\n\nimport React, {\n  Text,\n  View\n} from 'react-native';\n\nvar styles = React.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n});\n\nclass SimpleNative extends React.Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>This is a simple application.</Text>\n      </View>\n    )\n  }\n}\n\nReact.AppRegistry.registerComponent('SimpleNative', () => SimpleNative);\n```\n> 如果你希望显示一个更帅气的Native界面，可以拷贝链接代码：[Github搜索页](http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js)\n\n##### 2.启动node服务\n建好了js文件，需要启动一个端口为8081的服务将index.ios.js打包成index.ios.bundle\n在项目根目录下运行\n```\n(JS_DIR=`pwd`/ReactComponents; cd node_modules/react-native; npm run start -- --root $JS_DIR)\n```\n分解一下命令：\n1.将新建的ReactComponents文件夹目录赋值到JS_DIR上，注意需要是全路径！！！\n2.进入`node_modules/react-native`\n3.绑定`JS_DIR`会监听ReactComponents文件夹下的文件，然后`npm run start`启动native的node服务\n4.三行命令最好用()包装起来，可以避免运行后定位到`node_modules/react-native`文件夹下\n\n**再次运行iOS项目，当然也可以直接在模拟器上 Commend + R刷新，就会获得另一个错误。。。**\n~~~~~\n##### 3.开启Http支持\n苹果在iOS9之后默认关闭了对HTTP的支持，需要打开以访问localhost的服务\n在iOS项目的`Info.plist`文件中，加入\n``` xml\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSExceptionDomains</key>\n    <dict>\n        <key>localhost</key>\n        <dict>\n            <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>\n            <true/>\n        </dict>\n    </dict>\n</dict>\n```\n加入后，plist看起来是这样的\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-pllist)\n更多关于[App Transport Security](http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http)\n\n#### 7.最后\n重新运行iOS项目，点击push按钮后，在绿色加载条之后(第一次打包编译比较慢)，就能看到native的界面了，在搜索栏输入内容后回车，能够简单搜索Github内容（需要在index.ios.js添加[Github搜索页](http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js)代码）\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-github-search)\n\n如果将ReactView放置全屏显示，就更像一个原生的应用了 😉\n\n---\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n","slug":"react-native-in-iOS","published":1,"updated":"2017-12-01T07:53:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjannaza300051rnrwe9xhzcf","content":"<p>React Native的势头越来越猛，但凡提及Native，皆是一片666，大有替代原生APP的趋势，也许Native有着大好形势，但目前看来，尚有太多不足。<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-logo\" alt=\"Alt text\"><br><a id=\"more\"></a></p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><h5 id=\"在iOS原生项目中动态使用React-Native定制界面\"><a href=\"#在iOS原生项目中动态使用React-Native定制界面\" class=\"headerlink\" title=\"在iOS原生项目中动态使用React Native定制界面\"></a>在iOS原生项目中动态使用React Native定制界面</h5><p>如果你已经是一个iOS开发者，继续原生项目开发可能是更好的选择，而React Native，也许更加适合原生项目中部分动态页(例如广告、咨询详情)的编写，方便页面的多端重用和即时修改。<br><a href=\"https://github.com/TifaTsubasa/SimpleNative\" target=\"_blank\" rel=\"noopener\">完整项目Github地址</a></p>\n<h4 id=\"1-安装环境\"><a href=\"#1-安装环境\" class=\"headerlink\" title=\"1.安装环境\"></a>1.安装环境</h4><p>如果你之前只接触过iOS开发，使用终端也仅限于CocoaPods、Git，那么环境配置一定会费一番劲。</p>\n<ul>\n<li><p>安装Node.js<br>  Node.js官方下载：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a><br>  在官网可以下载到对应系统的Node安装包，非常简单</p>\n<blockquote>\n<p>推荐使用nvm安装管理Node.js，能够更好的控制node的版本<br>  nvm github地址：<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm</a><br>  中文安装方法：<a href=\"http://www.tuicool.com/articles/vmi6Zv7\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/vmi6Zv7</a></p>\n</blockquote>\n</li>\n<li><p>安装CocoaPods<br>  CocoaPods是iOS开发最常用的依赖管理工具<br>  CocoaPods安装使用方法：<a href=\"http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\" target=\"_blank\" rel=\"noopener\">唐巧blog</a></p>\n</li>\n</ul>\n<h4 id=\"2-iOS原生项目\"><a href=\"#2-iOS原生项目\" class=\"headerlink\" title=\"2.iOS原生项目\"></a>2.iOS原生项目</h4><p>我们需要准备一个简单的原生项目<code>SimpleNative</code>，选用的语言是<strong>Swift</strong><br>在<code>Main.storyboard</code>中初始化项目框架：导航控制器内有两层视图控制器，在第一层Controller中居中设置一个button用来push，第二层Controller空白待用<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-natigation.png\" alt=\"Alt text\"></p>\n<h4 id=\"3-初始化React-Native的node依赖\"><a href=\"#3-初始化React-Native的node依赖\" class=\"headerlink\" title=\"3.初始化React Native的node依赖\"></a>3.初始化React Native的node依赖</h4><h5 id=\"1-初始化node\"><a href=\"#1-初始化node\" class=\"headerlink\" title=\"1.初始化node\"></a>1.初始化node</h5><p>在终端中，定位到iOS项目的根目录，运行<br><code>npm init</code><br>然后一路回车即可</p>\n<blockquote>\n<p>注意：node项目的命名不能使用大写字母，所以指定name时输入<code>simple-native</code> 后回车</p>\n</blockquote>\n<p>执行完毕之后，在项目根目录下生成了一个<code>package.json</code>文件，类似于CocoaPods的<code>Podfile</code>文件，用来管理项目依赖</p>\n<h5 id=\"2-安装React-Native\"><a href=\"#2-安装React-Native\" class=\"headerlink\" title=\"2.安装React Native\"></a>2.安装React Native</h5><p>再项目根目录下运行<br><code>npm install --save react-native</code></p>\n<blockquote>\n<p>由于国内的网络问题，npm安装比较缓慢，可以使用<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>替代</p>\n</blockquote>\n<p>安装完毕之后，根目录下会生成<code>node_modules</code>文件夹，里面保存了<code>react</code>和<code>react-native</code>的依赖<br><code>--save</code>参数会在<code>package.json</code>文件中保存<code>react</code>和<code>react-native</code>的依赖声明</p>\n<h4 id=\"4-初始化CocoaPods\"><a href=\"#4-初始化CocoaPods\" class=\"headerlink\" title=\"4.初始化CocoaPods\"></a>4.初始化CocoaPods</h4><p>在项目根目录下，运行<br><code>pod init</code><br>在项目根目录下生成了<code>Podfile</code>，用任何编辑器打开，编写React Native的依赖<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">'7.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'SimpleNative'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  pod <span class=\"string\">'React'</span>, <span class=\"symbol\">:path</span> =&gt; <span class=\"string\">'./node_modules/react-native'</span>, <span class=\"symbol\">:subspecs</span> =&gt; [</span><br><span class=\"line\">    <span class=\"string\">'Core'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTImage'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTNetwork'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTText'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTWebSocket'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># Add any other subspecs you want to use in your project</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'SimpleNativeTests'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'SimpleNativeUITests'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>在项目的target下，pod导入<code>React</code>，路径指向了当前目录下<code>&#39;./node_modules/react-native&#39;</code>，然后还有一堆乱七八糟的子依赖(一个都不能少！)<br>运行<code>pod install</code>安装依赖，本地安装速度很快</p>\n<h4 id=\"5-绑定Native的视图\"><a href=\"#5-绑定Native的视图\" class=\"headerlink\" title=\"5.绑定Native的视图\"></a>5.绑定Native的视图</h4><h5 id=\"1-导入Native-View\"><a href=\"#1-导入Native-View\" class=\"headerlink\" title=\"1.导入Native View\"></a>1.导入Native View</h5><p>由于使用的是Swift项目，我们需要一个OC-Swift桥接文件导入Native的类，在桥接文件夹导入<br><code>#import &lt;RCTRootView.h&gt;</code></p>\n<h5 id=\"2-设置Native-View\"><a href=\"#2-设置Native-View\" class=\"headerlink\" title=\"2.设置Native View\"></a>2.设置Native View</h5><p>点击<code>SimpleNative.xcworkspace</code>打开iOS项目，新建一个<code>ReactView</code>继承于UIView，并为这个view添加RCTRootView的子视图<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReactView</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> rootView: <span class=\"type\">RCTRootView</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>?(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: aDecoder)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> jsCodeLocation = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://localhost:8081/index.ios.bundle?platform=ios\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rootView = <span class=\"type\">RCTRootView</span>(bundleURL: jsCodeLocation, moduleName: <span class=\"string\">\"SimpleNative\"</span>, initialProperties: <span class=\"literal\">nil</span>, launchOptions: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.rootView = rootView</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(rootView)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">layoutSubviews</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\">        rootView.frame = <span class=\"keyword\">self</span>.bounds</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在第二层控制器中居中显示一个View，并绑定为<code>ReactView</code><br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-react-view.png\" alt=\"Alt text\"></p>\n<p>再次运行项目，点击push按钮后，就会见到第一个红彤彤的Native错误了，但是这表示已经成功绑定了Native<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-error\" alt=\"Alt text\"></p>\n<h4 id=\"6-启动Native服务\"><a href=\"#6-启动Native服务\" class=\"headerlink\" title=\"6.启动Native服务\"></a>6.启动Native服务</h4><p>在ReactView的初始化中，我们为rootView指定了bundleURL和moduleName，其中moduleName既是当前项目名，而bundleURL，就要一步一步实现了，步步都是坑😓</p>\n<h5 id=\"1-新建index-ios-js\"><a href=\"#1-新建index-ios-js\" class=\"headerlink\" title=\"1.新建index.ios.js\"></a>1.新建index.ios.js</h5><p>在项目根目标下，新建ReactComponents文件夹，并在文件夹中新建<code>index.ios.js</code>文件，在js文件中<br>写入react代码<br>官方推荐的简单代码为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;</span><br><span class=\"line\">  Text,</span><br><span class=\"line\">  View</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> styles = React.StyleSheet.create(&#123;</span><br><span class=\"line\">  container: &#123;</span><br><span class=\"line\">    flex: <span class=\"number\">1</span>,</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">'red'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">        &lt;Text&gt;This is a simple application.&lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">React.AppRegistry.registerComponent(<span class=\"string\">'SimpleNative'</span>, () =&gt; SimpleNative);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果你希望显示一个更帅气的Native界面，可以拷贝链接代码：<a href=\"http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js\" target=\"_blank\" rel=\"noopener\">Github搜索页</a></p>\n</blockquote>\n<h5 id=\"2-启动node服务\"><a href=\"#2-启动node服务\" class=\"headerlink\" title=\"2.启动node服务\"></a>2.启动node服务</h5><p>建好了js文件，需要启动一个端口为8081的服务将index.ios.js打包成index.ios.bundle<br>在项目根目录下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(JS_DIR=`pwd`/ReactComponents; cd node_modules/react-native; npm run start -- --root $JS_DIR)</span><br></pre></td></tr></table></figure></p>\n<p>分解一下命令：<br>1.将新建的ReactComponents文件夹目录赋值到JS_DIR上，注意需要是全路径！！！<br>2.进入<code>node_modules/react-native</code><br>3.绑定<code>JS_DIR</code>会监听ReactComponents文件夹下的文件，然后<code>npm run start</code>启动native的node服务<br>4.三行命令最好用()包装起来，可以避免运行后定位到<code>node_modules/react-native</code>文件夹下</p>\n<p><strong>再次运行iOS项目，当然也可以直接在模拟器上 Commend + R刷新，就会获得另一个错误。。。</strong><br><del>~</del></p>\n<h5 id=\"3-开启Http支持\"><a href=\"#3-开启Http支持\" class=\"headerlink\" title=\"3.开启Http支持\"></a>3.开启Http支持</h5><p>苹果在iOS9之后默认关闭了对HTTP的支持，需要打开以访问localhost的服务<br>在iOS项目的<code>Info.plist</code>文件中，加入<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAppTransportSecurity<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSExceptionDomains<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>localhost<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSTemporaryExceptionAllowsInsecureHTTPLoads<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加入后，plist看起来是这样的<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-pllist\" alt=\"Alt text\"><br>更多关于<a href=\"http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http\" target=\"_blank\" rel=\"noopener\">App Transport Security</a></p>\n<h4 id=\"7-最后\"><a href=\"#7-最后\" class=\"headerlink\" title=\"7.最后\"></a>7.最后</h4><p>重新运行iOS项目，点击push按钮后，在绿色加载条之后(第一次打包编译比较慢)，就能看到native的界面了，在搜索栏输入内容后回车，能够简单搜索Github内容（需要在index.ios.js添加<a href=\"http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js\" target=\"_blank\" rel=\"noopener\">Github搜索页</a>代码）<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-github-search\" alt=\"Alt text\"></p>\n<p>如果将ReactView放置全屏显示，就更像一个原生的应用了 😉</p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>React Native的势头越来越猛，但凡提及Native，皆是一片666，大有替代原生APP的趋势，也许Native有着大好形势，但目前看来，尚有太多不足。<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-logo\" alt=\"Alt text\"><br>","more":"</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><h5 id=\"在iOS原生项目中动态使用React-Native定制界面\"><a href=\"#在iOS原生项目中动态使用React-Native定制界面\" class=\"headerlink\" title=\"在iOS原生项目中动态使用React Native定制界面\"></a>在iOS原生项目中动态使用React Native定制界面</h5><p>如果你已经是一个iOS开发者，继续原生项目开发可能是更好的选择，而React Native，也许更加适合原生项目中部分动态页(例如广告、咨询详情)的编写，方便页面的多端重用和即时修改。<br><a href=\"https://github.com/TifaTsubasa/SimpleNative\" target=\"_blank\" rel=\"noopener\">完整项目Github地址</a></p>\n<h4 id=\"1-安装环境\"><a href=\"#1-安装环境\" class=\"headerlink\" title=\"1.安装环境\"></a>1.安装环境</h4><p>如果你之前只接触过iOS开发，使用终端也仅限于CocoaPods、Git，那么环境配置一定会费一番劲。</p>\n<ul>\n<li><p>安装Node.js<br>  Node.js官方下载：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a><br>  在官网可以下载到对应系统的Node安装包，非常简单</p>\n<blockquote>\n<p>推荐使用nvm安装管理Node.js，能够更好的控制node的版本<br>  nvm github地址：<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/creationix/nvm</a><br>  中文安装方法：<a href=\"http://www.tuicool.com/articles/vmi6Zv7\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/vmi6Zv7</a></p>\n</blockquote>\n</li>\n<li><p>安装CocoaPods<br>  CocoaPods是iOS开发最常用的依赖管理工具<br>  CocoaPods安装使用方法：<a href=\"http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\" target=\"_blank\" rel=\"noopener\">唐巧blog</a></p>\n</li>\n</ul>\n<h4 id=\"2-iOS原生项目\"><a href=\"#2-iOS原生项目\" class=\"headerlink\" title=\"2.iOS原生项目\"></a>2.iOS原生项目</h4><p>我们需要准备一个简单的原生项目<code>SimpleNative</code>，选用的语言是<strong>Swift</strong><br>在<code>Main.storyboard</code>中初始化项目框架：导航控制器内有两层视图控制器，在第一层Controller中居中设置一个button用来push，第二层Controller空白待用<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-natigation.png\" alt=\"Alt text\"></p>\n<h4 id=\"3-初始化React-Native的node依赖\"><a href=\"#3-初始化React-Native的node依赖\" class=\"headerlink\" title=\"3.初始化React Native的node依赖\"></a>3.初始化React Native的node依赖</h4><h5 id=\"1-初始化node\"><a href=\"#1-初始化node\" class=\"headerlink\" title=\"1.初始化node\"></a>1.初始化node</h5><p>在终端中，定位到iOS项目的根目录，运行<br><code>npm init</code><br>然后一路回车即可</p>\n<blockquote>\n<p>注意：node项目的命名不能使用大写字母，所以指定name时输入<code>simple-native</code> 后回车</p>\n</blockquote>\n<p>执行完毕之后，在项目根目录下生成了一个<code>package.json</code>文件，类似于CocoaPods的<code>Podfile</code>文件，用来管理项目依赖</p>\n<h5 id=\"2-安装React-Native\"><a href=\"#2-安装React-Native\" class=\"headerlink\" title=\"2.安装React Native\"></a>2.安装React Native</h5><p>再项目根目录下运行<br><code>npm install --save react-native</code></p>\n<blockquote>\n<p>由于国内的网络问题，npm安装比较缓慢，可以使用<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>替代</p>\n</blockquote>\n<p>安装完毕之后，根目录下会生成<code>node_modules</code>文件夹，里面保存了<code>react</code>和<code>react-native</code>的依赖<br><code>--save</code>参数会在<code>package.json</code>文件中保存<code>react</code>和<code>react-native</code>的依赖声明</p>\n<h4 id=\"4-初始化CocoaPods\"><a href=\"#4-初始化CocoaPods\" class=\"headerlink\" title=\"4.初始化CocoaPods\"></a>4.初始化CocoaPods</h4><p>在项目根目录下，运行<br><code>pod init</code><br>在项目根目录下生成了<code>Podfile</code>，用任何编辑器打开，编写React Native的依赖<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform <span class=\"symbol\">:ios</span>, <span class=\"string\">'7.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'SimpleNative'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  pod <span class=\"string\">'React'</span>, <span class=\"symbol\">:path</span> =&gt; <span class=\"string\">'./node_modules/react-native'</span>, <span class=\"symbol\">:subspecs</span> =&gt; [</span><br><span class=\"line\">    <span class=\"string\">'Core'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTImage'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTNetwork'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTText'</span>,</span><br><span class=\"line\">    <span class=\"string\">'RCTWebSocket'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># Add any other subspecs you want to use in your project</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'SimpleNativeTests'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">'SimpleNativeUITests'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<p>在项目的target下，pod导入<code>React</code>，路径指向了当前目录下<code>&#39;./node_modules/react-native&#39;</code>，然后还有一堆乱七八糟的子依赖(一个都不能少！)<br>运行<code>pod install</code>安装依赖，本地安装速度很快</p>\n<h4 id=\"5-绑定Native的视图\"><a href=\"#5-绑定Native的视图\" class=\"headerlink\" title=\"5.绑定Native的视图\"></a>5.绑定Native的视图</h4><h5 id=\"1-导入Native-View\"><a href=\"#1-导入Native-View\" class=\"headerlink\" title=\"1.导入Native View\"></a>1.导入Native View</h5><p>由于使用的是Swift项目，我们需要一个OC-Swift桥接文件导入Native的类，在桥接文件夹导入<br><code>#import &lt;RCTRootView.h&gt;</code></p>\n<h5 id=\"2-设置Native-View\"><a href=\"#2-设置Native-View\" class=\"headerlink\" title=\"2.设置Native View\"></a>2.设置Native View</h5><p>点击<code>SimpleNative.xcworkspace</code>打开iOS项目，新建一个<code>ReactView</code>继承于UIView，并为这个view添加RCTRootView的子视图<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReactView</span>: <span class=\"title\">UIView</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> rootView: <span class=\"type\">RCTRootView</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>?(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: aDecoder)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> jsCodeLocation = <span class=\"type\">NSURL</span>(string: <span class=\"string\">\"http://localhost:8081/index.ios.bundle?platform=ios\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> rootView = <span class=\"type\">RCTRootView</span>(bundleURL: jsCodeLocation, moduleName: <span class=\"string\">\"SimpleNative\"</span>, initialProperties: <span class=\"literal\">nil</span>, launchOptions: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.rootView = rootView</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(rootView)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">layoutSubviews</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\">        rootView.frame = <span class=\"keyword\">self</span>.bounds</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在第二层控制器中居中显示一个View，并绑定为<code>ReactView</code><br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-react-view.png\" alt=\"Alt text\"></p>\n<p>再次运行项目，点击push按钮后，就会见到第一个红彤彤的Native错误了，但是这表示已经成功绑定了Native<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-error\" alt=\"Alt text\"></p>\n<h4 id=\"6-启动Native服务\"><a href=\"#6-启动Native服务\" class=\"headerlink\" title=\"6.启动Native服务\"></a>6.启动Native服务</h4><p>在ReactView的初始化中，我们为rootView指定了bundleURL和moduleName，其中moduleName既是当前项目名，而bundleURL，就要一步一步实现了，步步都是坑😓</p>\n<h5 id=\"1-新建index-ios-js\"><a href=\"#1-新建index-ios-js\" class=\"headerlink\" title=\"1.新建index.ios.js\"></a>1.新建index.ios.js</h5><p>在项目根目标下，新建ReactComponents文件夹，并在文件夹中新建<code>index.ios.js</code>文件，在js文件中<br>写入react代码<br>官方推荐的简单代码为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;</span><br><span class=\"line\">  Text,</span><br><span class=\"line\">  View</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> styles = React.StyleSheet.create(&#123;</span><br><span class=\"line\">  container: &#123;</span><br><span class=\"line\">    flex: <span class=\"number\">1</span>,</span><br><span class=\"line\">    backgroundColor: <span class=\"string\">'red'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleNative</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">        &lt;Text&gt;This is a simple application.&lt;<span class=\"regexp\">/Text&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">React.AppRegistry.registerComponent(<span class=\"string\">'SimpleNative'</span>, () =&gt; SimpleNative);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果你希望显示一个更帅气的Native界面，可以拷贝链接代码：<a href=\"http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js\" target=\"_blank\" rel=\"noopener\">Github搜索页</a></p>\n</blockquote>\n<h5 id=\"2-启动node服务\"><a href=\"#2-启动node服务\" class=\"headerlink\" title=\"2.启动node服务\"></a>2.启动node服务</h5><p>建好了js文件，需要启动一个端口为8081的服务将index.ios.js打包成index.ios.bundle<br>在项目根目录下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(JS_DIR=`pwd`/ReactComponents; cd node_modules/react-native; npm run start -- --root $JS_DIR)</span><br></pre></td></tr></table></figure></p>\n<p>分解一下命令：<br>1.将新建的ReactComponents文件夹目录赋值到JS_DIR上，注意需要是全路径！！！<br>2.进入<code>node_modules/react-native</code><br>3.绑定<code>JS_DIR</code>会监听ReactComponents文件夹下的文件，然后<code>npm run start</code>启动native的node服务<br>4.三行命令最好用()包装起来，可以避免运行后定位到<code>node_modules/react-native</code>文件夹下</p>\n<p><strong>再次运行iOS项目，当然也可以直接在模拟器上 Commend + R刷新，就会获得另一个错误。。。</strong><br><del>~</del></p>\n<h5 id=\"3-开启Http支持\"><a href=\"#3-开启Http支持\" class=\"headerlink\" title=\"3.开启Http支持\"></a>3.开启Http支持</h5><p>苹果在iOS9之后默认关闭了对HTTP的支持，需要打开以访问localhost的服务<br>在iOS项目的<code>Info.plist</code>文件中，加入<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAppTransportSecurity<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSExceptionDomains<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>localhost<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSTemporaryExceptionAllowsInsecureHTTPLoads<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>加入后，plist看起来是这样的<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-pllist\" alt=\"Alt text\"><br>更多关于<a href=\"http://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http\" target=\"_blank\" rel=\"noopener\">App Transport Security</a></p>\n<h4 id=\"7-最后\"><a href=\"#7-最后\" class=\"headerlink\" title=\"7.最后\"></a>7.最后</h4><p>重新运行iOS项目，点击push按钮后，在绿色加载条之后(第一次打包编译比较慢)，就能看到native的界面了，在搜索栏输入内容后回车，能够简单搜索Github内容（需要在index.ios.js添加<a href=\"http://7xq01t.com1.z0.glb.clouddn.com/index.ios.js\" target=\"_blank\" rel=\"noopener\">Github搜索页</a>代码）<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/react_native_in_ios/simple-native-github-search\" alt=\"Alt text\"></p>\n<p>如果将ReactView放置全屏显示，就更像一个原生的应用了 😉</p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>"},{"title":"我的Swift网络数据处理流","date":"2016-08-02T08:09:05.000Z","_content":"\n这是一篇跳票了一万年的博客。。\n网络请求是iOS端非常重要的一环，虽然有着诸如Alamofire等框架的加持，统一请求流程、简化请求代码依旧是需要仔细琢磨的事情\n<!-- more -->\n\n> 参考资料\n> [如何处理 Swift 中的异步错误](http://swift.gg/2016/02/16/async-errors/)\n> [陈乘方 一个 Swift 项目网络层的变迁.pdf](https://github.com/ThinkDevelopers/SwiftConChina/blob/master/2016_ppt/01.%E9%99%88%E4%B9%98%E6%96%B9%20%E4%B8%80%E4%B8%AA%20Swift%20%E9%A1%B9%E7%9B%AE%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%8F%98%E8%BF%81.pdf)\n> [TTReflect：json/data 转模型](https://github.com/TifaTsubasa/TTReflect)\n\n**最重要的:**  [项目源码](https://github.com/TifaTsubasa/SwiftNetWorkFlow)\n\n### 框架\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow)\n\n#### 1.网络请求层\n网络请求层`NetworkKit`主要用来封装三方网络请求库，统一项目的网络请求方式，降低对于三方库的依赖性，并且负责将请求得到的data转为json数据\n\n#### 2.数据处理层\n数据处理层`Loader`负责管理请求的链接、参数等，同时将json转化为能够直接调用的模型数组，尽可能为控制器减负\n\n### 请求层\n\n首先看一下重构之前的网络请求层\n\n``` swift\nstatic func fetch(type: HttpRequestType, URLString url: String, parameters para: [String: AnyObject]? = nil, success: ((json: AnyObject) -> Void)?, error: ((statusCode: Int, json: AnyObject) -> Void)?, failure: ((error: ErrorType?) -> Void)? )\n```\nOC时代延续下来的代码，直接传入所有的请求参数和回调函数，调用起来极不灵活\n\n#### 1.Fluent Interface\n新的网络类改用了实例方法来调用请求，并使用流式接口设计保证调用的灵活性\n\n``` swift\n// 以 url、params为例\nclass NetworkKit {\n  var url: String?\n  var params: [String: AnyObject]?\n\n  func fetch(url: String) -> Self {\n    self.url = url\n    return self\n  }\n  func params(params: [String: AnyObject]) -> Self {\n    self.params = params\n    return self\n  }\n}\n```\n很容易理解的代码，每个函数保存相应的属性并返回自身实例，保证了链式调用\n\n``` swift\nNetworkKit().fetch(\"https://tsusolo.com\").params([\"foo\": \"11\"])\n```\n\n#### 2.请求结果分类\n与以往 成功/失败 两类请求结果不同的是，这里将请求结果分为三类：\n* success：请求成功且返回了正确的结果，通常HTTP状态码为200\n* error：    请求成功但返回了失败的信息，比如未找到资源、权限错误等\n* failure： 请求失败，例如网络错误\n\n在NetworkKit中声明一下三种请求回调的类型，补充相应的流式接口\n``` swift\nclass NetworkKit {\n  typealias SuccessHandlerType = (AnyObject? -> Void)\n  typealias ErrorHandlerType = ((Int, AnyObject?) -> Void)\n  typealias FailureHandlerType = (NSError? -> Void)\n\n  var successHandler: SuccessType?\n  var errorHandler: ErrorType?\n  var failureHandler: FailureType?\n  // 以success为例，error、failure类似，详见源码\n  func success(handler: SuccessHandlerType) -> Self {\n    self.successHandler = handler\n    return self\n  }\n}\n```\n\n现在的调用应该是这样子\n``` swift\nNetworkKit().fetch(\"https://tsusolo.com\")\n.success { (json) in\n  print(json)\n}.error { (code, errorJson) in\n  print(errorJson)\n}.failure { (error) in\n  print(error)\n}\n```\n\n> 请求时需要设置url、参数、header以及各类回调函数，Fluent Interface让NetworkKit在调用时自由增减参数，保证简洁性\n\n#### 3.请求和状况处理\n网络请求上，这里使用了`Alamofire`并为此为例\n``` swift\nvar httpRequest: Request?\nfunc request() -> Self {\n    if let url = url {\n      httpRequest = Alamofire.request(.GET, url, parameters: params, encoding: .URL, headers: headers)\n        .response { request, response, data, error in\n          let statusCode = response?.statusCode\n          if let statusCode = statusCode {  // request success\n            let json: AnyObject? = data.flatMap {\n              return try? NSJSONSerialization.JSONObjectWithData($0, options: .MutableContainers)\n            }\n            if statusCode == 200 {\n              self.successHandler?(json)\n            } else {\n              self.errorHandler?(statusCode, json)\n            }\n          } else {                          // request failure\n            self.failureHandler?(error)\n          }\n      }\n    }\n    return self\n  }\n```\n在`request`方法中，将链式调用保存下来的参数，置入`Alamofire`并发起请求，在`Alamofire`的回调函数中，根据响应结果进行分类，分别调用相应状况的回调函数。\n> 1.这里使用了一个`httpRequest`保存了Alamofire的请求，可用于取消请求等操作\n> 2.结果分类需要依据具体情况，示例中根据HTTP 200状态码来判断仅作为参考方式\n\n#### 4.示例\n使用豆瓣的电影API作为示例\n\n``` swift\n// 省略了error和failure的错误处理，看起来格外简洁 ^^\nNetworkKit().fetch(\"https://api.douban.com/v2/movie/subject/1764796\")\n.success { (json) in\n  print(json)\n}.request()\n```\n\n### 模型映射\n#### 1.TTReflect\n在Objective-C时代，`JsonModel`、`MJExtension`、`Mantle`都是人气很高的json/model转换框架。年初开始探索Swift的时候，第一件事情就是寻找符合下列条件的Swift版json转model框架\n* 模型不需要继承其他的第三方类型\n* 模型不需要手写映射关系\n* 支持嵌套映射\n\n找了一圈发现并没有符合要求的框架，于是自己摸索一番，便有了现在的 [TTReflect](https://github.com/TifaTsubasa/TTReflect)（目前已更新到2.0版本），具体用法参见[Github](https://github.com/TifaTsubasa/TTReflect)，大概就是这样  ↓\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow-reflect)\n\n#### 2.映射函数&模型的回调函数\n不同的请求会返回不同的模型类型，需要为`NetworkKit`声明一个泛型，来标明模型类型并与`result`回调函数对应。同样使用Fluent Interface将json转换model的映射函数和`result`回调注入\n\n``` swift\nclass NetworkKit<Model> {\n  typealias ResultHandlerType = (Model -> Void)\n  typealias ReflectHandlerType = (AnyObject? -> Model)\n\n  var resultHanlder: ResultHandlerType?\n  var reflectHandler: ReflectHandlerType?\n\n  func result(handler: ResultHandlerType) -> Self {\n    self.resultHanlder = handler\n    return self\n  }\n  func reflect(f: ReflectHandlerType) -> Self {\n    reflectHandler = f\n    return self\n  }\n}\n```\n\n#### 3.回调模型\n在请求方法`request`的`success`回调下，通过使用保存下来的映射函数，将json转换为相应的模型，并放入模型的回调中\n\n``` swift\nif statusCode == 200 {          // request success & response right\n  self.successHandler?(json)\n  if let reflectHandler = self.reflectHandler {\n    self.resultHandler?(reflectHandler(json))\n  }\n}\n```\n\n**e.g.g**\n调用时可以同时获得json和模型（以Movie模型为例）\n``` swift\nNetworkKit<Movie>().fetch(\"https://api.douban.com/v2/movie/subject/1764796\")\n.reflect { (json) -> Movie in\n  Reflect<Movie>.mapObject(json: json)\n}.success({ (json) in\n  print(json)\n}).result { (movie) in\n  print(movie)\n}.request()\n```\n> 在初始化Network时声明模型的类型，result回调函数就会返回指定类型的模型结果\n\n### Loader\n当控制器做网络请求的时候，是不需要知道请求细节的，只需要发出请求、拿到结果就可以了。将模型声明，请求参数和转换方式封装起来在loader中，减轻控制器的负担\n``` swift\nclass MovieLoader: NetworkKit<Movie> {\n  func load() -> Self {\n    return self.fetch(\"https://api.douban.com/v2/movie/subject/1764796\")\n    .reflect { (json) -> Movie in\n      Reflect<Movie>.mapObject(json: json)\n    }.request()\n  }\n}\n```\n实际调用的时候就非常简单了\n\n``` swift\nMovieLoader().result { (movie) in\n  self.titleLabel.text = movie.title\n}.error({ (code, json) in\n  print(code, json)\n}).failure({ (error) in\n  print(\"error: \", error)\n}).load()\n```\n\n### 进阶\n#### 1.方法拓展\n假设你的请求是下拉刷新的时候发出的，你的请求代码可能就变得惨不忍睹\n\n``` swift\nMovieLoader().result { (movie) in\n  tableView.endRefresh() // 停止刷新\n  print(movie)\n}.error({ (code, json) in\n  tableView.endRefresh()\n  print(code, json)\n}).failure({ (error) in\n  tableView.endRefresh()\n  print(\"error: \", error)\n}).load()\n```\n以类似`success`回调的方式，为`Network`添加一个`finish`回调，在请求结束时直接调用（详见源码），将相应操作统一处理\n\n``` swift\nMovieLoader().finish({\n  tableView.endRefresh() // 停止刷新\n}).result { (movie) in\n  print(movie)\n}.error({ (code, json) in\n  print(code, json)\n}).failure({ (error) in\n  print(\"error: \", error)\n}).load()\n```\n\n#### 2.复杂模型\n再假设请求结果的json比较复杂，需要多个模型来承载，类似这样 ↓\n\n``` bash\n{\n\t\"aa\": {\n\t\t...\n\t},\n\t\"bb\": {\n\t\t...\n\t}\n}\n```\n如果这里需要AA和BB两个模型来映射到相应的json值上，可以利用Swift元组来实现\n\n``` swift\nclass Loader: NetworkKit<(AA, BB)> {\n  func load() -> Self {\n    let f: (AnyObject? -> (AA, BB)) = { j in\n      let aModel = Reflect<AA>.mapObject(json: j?[\"aa\"])\n      let bModel = Reflect<BB>.mapObject(json: j?[\"bb\"])\n      return (aModel, bModel)\n    }\n    return self.fetch(someUrl).reflect(f).request()\n  }\n}\n```\n> 这里也可以使用更上层的模型同时包装AB类型，利用TTReflect的嵌套转换一次性搞定，根据实际需求使用\n\n### 总结\n从4月swiftcon后开始构思，历经多次重构，参考了各类资料，在2.0版上动用各类特性后（可见源码 branch 2.0），最终在定稿的时候回归朴质，用最简单的方式来处理。\n\n网络请求是个挺复杂的问题，很多时候更依赖于实际情况，就比如你遇到了一个凡事都扔给你httpStatusCode 200的奇葩后端，你的请求状况分类就需要特别对待，再比如我的项目中的`error`回调，返回的是错误json中的message字段。也因此没有将文章的内容变成通用的lib，只是提供一份思路，旨在提供更优雅的请求方式\n\n---\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n","source":"_posts/我的Swift网络数据处理流.md","raw":"---\ntitle: 我的Swift网络数据处理流\ndate: 2016-08-02 16:09:05\ncategories: iOS\npermalink: swift-network-flow\n---\n\n这是一篇跳票了一万年的博客。。\n网络请求是iOS端非常重要的一环，虽然有着诸如Alamofire等框架的加持，统一请求流程、简化请求代码依旧是需要仔细琢磨的事情\n<!-- more -->\n\n> 参考资料\n> [如何处理 Swift 中的异步错误](http://swift.gg/2016/02/16/async-errors/)\n> [陈乘方 一个 Swift 项目网络层的变迁.pdf](https://github.com/ThinkDevelopers/SwiftConChina/blob/master/2016_ppt/01.%E9%99%88%E4%B9%98%E6%96%B9%20%E4%B8%80%E4%B8%AA%20Swift%20%E9%A1%B9%E7%9B%AE%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%8F%98%E8%BF%81.pdf)\n> [TTReflect：json/data 转模型](https://github.com/TifaTsubasa/TTReflect)\n\n**最重要的:**  [项目源码](https://github.com/TifaTsubasa/SwiftNetWorkFlow)\n\n### 框架\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow)\n\n#### 1.网络请求层\n网络请求层`NetworkKit`主要用来封装三方网络请求库，统一项目的网络请求方式，降低对于三方库的依赖性，并且负责将请求得到的data转为json数据\n\n#### 2.数据处理层\n数据处理层`Loader`负责管理请求的链接、参数等，同时将json转化为能够直接调用的模型数组，尽可能为控制器减负\n\n### 请求层\n\n首先看一下重构之前的网络请求层\n\n``` swift\nstatic func fetch(type: HttpRequestType, URLString url: String, parameters para: [String: AnyObject]? = nil, success: ((json: AnyObject) -> Void)?, error: ((statusCode: Int, json: AnyObject) -> Void)?, failure: ((error: ErrorType?) -> Void)? )\n```\nOC时代延续下来的代码，直接传入所有的请求参数和回调函数，调用起来极不灵活\n\n#### 1.Fluent Interface\n新的网络类改用了实例方法来调用请求，并使用流式接口设计保证调用的灵活性\n\n``` swift\n// 以 url、params为例\nclass NetworkKit {\n  var url: String?\n  var params: [String: AnyObject]?\n\n  func fetch(url: String) -> Self {\n    self.url = url\n    return self\n  }\n  func params(params: [String: AnyObject]) -> Self {\n    self.params = params\n    return self\n  }\n}\n```\n很容易理解的代码，每个函数保存相应的属性并返回自身实例，保证了链式调用\n\n``` swift\nNetworkKit().fetch(\"https://tsusolo.com\").params([\"foo\": \"11\"])\n```\n\n#### 2.请求结果分类\n与以往 成功/失败 两类请求结果不同的是，这里将请求结果分为三类：\n* success：请求成功且返回了正确的结果，通常HTTP状态码为200\n* error：    请求成功但返回了失败的信息，比如未找到资源、权限错误等\n* failure： 请求失败，例如网络错误\n\n在NetworkKit中声明一下三种请求回调的类型，补充相应的流式接口\n``` swift\nclass NetworkKit {\n  typealias SuccessHandlerType = (AnyObject? -> Void)\n  typealias ErrorHandlerType = ((Int, AnyObject?) -> Void)\n  typealias FailureHandlerType = (NSError? -> Void)\n\n  var successHandler: SuccessType?\n  var errorHandler: ErrorType?\n  var failureHandler: FailureType?\n  // 以success为例，error、failure类似，详见源码\n  func success(handler: SuccessHandlerType) -> Self {\n    self.successHandler = handler\n    return self\n  }\n}\n```\n\n现在的调用应该是这样子\n``` swift\nNetworkKit().fetch(\"https://tsusolo.com\")\n.success { (json) in\n  print(json)\n}.error { (code, errorJson) in\n  print(errorJson)\n}.failure { (error) in\n  print(error)\n}\n```\n\n> 请求时需要设置url、参数、header以及各类回调函数，Fluent Interface让NetworkKit在调用时自由增减参数，保证简洁性\n\n#### 3.请求和状况处理\n网络请求上，这里使用了`Alamofire`并为此为例\n``` swift\nvar httpRequest: Request?\nfunc request() -> Self {\n    if let url = url {\n      httpRequest = Alamofire.request(.GET, url, parameters: params, encoding: .URL, headers: headers)\n        .response { request, response, data, error in\n          let statusCode = response?.statusCode\n          if let statusCode = statusCode {  // request success\n            let json: AnyObject? = data.flatMap {\n              return try? NSJSONSerialization.JSONObjectWithData($0, options: .MutableContainers)\n            }\n            if statusCode == 200 {\n              self.successHandler?(json)\n            } else {\n              self.errorHandler?(statusCode, json)\n            }\n          } else {                          // request failure\n            self.failureHandler?(error)\n          }\n      }\n    }\n    return self\n  }\n```\n在`request`方法中，将链式调用保存下来的参数，置入`Alamofire`并发起请求，在`Alamofire`的回调函数中，根据响应结果进行分类，分别调用相应状况的回调函数。\n> 1.这里使用了一个`httpRequest`保存了Alamofire的请求，可用于取消请求等操作\n> 2.结果分类需要依据具体情况，示例中根据HTTP 200状态码来判断仅作为参考方式\n\n#### 4.示例\n使用豆瓣的电影API作为示例\n\n``` swift\n// 省略了error和failure的错误处理，看起来格外简洁 ^^\nNetworkKit().fetch(\"https://api.douban.com/v2/movie/subject/1764796\")\n.success { (json) in\n  print(json)\n}.request()\n```\n\n### 模型映射\n#### 1.TTReflect\n在Objective-C时代，`JsonModel`、`MJExtension`、`Mantle`都是人气很高的json/model转换框架。年初开始探索Swift的时候，第一件事情就是寻找符合下列条件的Swift版json转model框架\n* 模型不需要继承其他的第三方类型\n* 模型不需要手写映射关系\n* 支持嵌套映射\n\n找了一圈发现并没有符合要求的框架，于是自己摸索一番，便有了现在的 [TTReflect](https://github.com/TifaTsubasa/TTReflect)（目前已更新到2.0版本），具体用法参见[Github](https://github.com/TifaTsubasa/TTReflect)，大概就是这样  ↓\n![Alt text](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow-reflect)\n\n#### 2.映射函数&模型的回调函数\n不同的请求会返回不同的模型类型，需要为`NetworkKit`声明一个泛型，来标明模型类型并与`result`回调函数对应。同样使用Fluent Interface将json转换model的映射函数和`result`回调注入\n\n``` swift\nclass NetworkKit<Model> {\n  typealias ResultHandlerType = (Model -> Void)\n  typealias ReflectHandlerType = (AnyObject? -> Model)\n\n  var resultHanlder: ResultHandlerType?\n  var reflectHandler: ReflectHandlerType?\n\n  func result(handler: ResultHandlerType) -> Self {\n    self.resultHanlder = handler\n    return self\n  }\n  func reflect(f: ReflectHandlerType) -> Self {\n    reflectHandler = f\n    return self\n  }\n}\n```\n\n#### 3.回调模型\n在请求方法`request`的`success`回调下，通过使用保存下来的映射函数，将json转换为相应的模型，并放入模型的回调中\n\n``` swift\nif statusCode == 200 {          // request success & response right\n  self.successHandler?(json)\n  if let reflectHandler = self.reflectHandler {\n    self.resultHandler?(reflectHandler(json))\n  }\n}\n```\n\n**e.g.g**\n调用时可以同时获得json和模型（以Movie模型为例）\n``` swift\nNetworkKit<Movie>().fetch(\"https://api.douban.com/v2/movie/subject/1764796\")\n.reflect { (json) -> Movie in\n  Reflect<Movie>.mapObject(json: json)\n}.success({ (json) in\n  print(json)\n}).result { (movie) in\n  print(movie)\n}.request()\n```\n> 在初始化Network时声明模型的类型，result回调函数就会返回指定类型的模型结果\n\n### Loader\n当控制器做网络请求的时候，是不需要知道请求细节的，只需要发出请求、拿到结果就可以了。将模型声明，请求参数和转换方式封装起来在loader中，减轻控制器的负担\n``` swift\nclass MovieLoader: NetworkKit<Movie> {\n  func load() -> Self {\n    return self.fetch(\"https://api.douban.com/v2/movie/subject/1764796\")\n    .reflect { (json) -> Movie in\n      Reflect<Movie>.mapObject(json: json)\n    }.request()\n  }\n}\n```\n实际调用的时候就非常简单了\n\n``` swift\nMovieLoader().result { (movie) in\n  self.titleLabel.text = movie.title\n}.error({ (code, json) in\n  print(code, json)\n}).failure({ (error) in\n  print(\"error: \", error)\n}).load()\n```\n\n### 进阶\n#### 1.方法拓展\n假设你的请求是下拉刷新的时候发出的，你的请求代码可能就变得惨不忍睹\n\n``` swift\nMovieLoader().result { (movie) in\n  tableView.endRefresh() // 停止刷新\n  print(movie)\n}.error({ (code, json) in\n  tableView.endRefresh()\n  print(code, json)\n}).failure({ (error) in\n  tableView.endRefresh()\n  print(\"error: \", error)\n}).load()\n```\n以类似`success`回调的方式，为`Network`添加一个`finish`回调，在请求结束时直接调用（详见源码），将相应操作统一处理\n\n``` swift\nMovieLoader().finish({\n  tableView.endRefresh() // 停止刷新\n}).result { (movie) in\n  print(movie)\n}.error({ (code, json) in\n  print(code, json)\n}).failure({ (error) in\n  print(\"error: \", error)\n}).load()\n```\n\n#### 2.复杂模型\n再假设请求结果的json比较复杂，需要多个模型来承载，类似这样 ↓\n\n``` bash\n{\n\t\"aa\": {\n\t\t...\n\t},\n\t\"bb\": {\n\t\t...\n\t}\n}\n```\n如果这里需要AA和BB两个模型来映射到相应的json值上，可以利用Swift元组来实现\n\n``` swift\nclass Loader: NetworkKit<(AA, BB)> {\n  func load() -> Self {\n    let f: (AnyObject? -> (AA, BB)) = { j in\n      let aModel = Reflect<AA>.mapObject(json: j?[\"aa\"])\n      let bModel = Reflect<BB>.mapObject(json: j?[\"bb\"])\n      return (aModel, bModel)\n    }\n    return self.fetch(someUrl).reflect(f).request()\n  }\n}\n```\n> 这里也可以使用更上层的模型同时包装AB类型，利用TTReflect的嵌套转换一次性搞定，根据实际需求使用\n\n### 总结\n从4月swiftcon后开始构思，历经多次重构，参考了各类资料，在2.0版上动用各类特性后（可见源码 branch 2.0），最终在定稿的时候回归朴质，用最简单的方式来处理。\n\n网络请求是个挺复杂的问题，很多时候更依赖于实际情况，就比如你遇到了一个凡事都扔给你httpStatusCode 200的奇葩后端，你的请求状况分类就需要特别对待，再比如我的项目中的`error`回调，返回的是错误json中的message字段。也因此没有将文章的内容变成通用的lib，只是提供一份思路，旨在提供更优雅的请求方式\n\n---\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n","slug":"swift-network-flow","published":1,"updated":"2017-12-01T08:00:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjannaza600071rnrbtk1oaa5","content":"<p>这是一篇跳票了一万年的博客。。<br>网络请求是iOS端非常重要的一环，虽然有着诸如Alamofire等框架的加持，统一请求流程、简化请求代码依旧是需要仔细琢磨的事情<br><a id=\"more\"></a></p>\n<blockquote>\n<p>参考资料<br><a href=\"http://swift.gg/2016/02/16/async-errors/\" target=\"_blank\" rel=\"noopener\">如何处理 Swift 中的异步错误</a><br><a href=\"https://github.com/ThinkDevelopers/SwiftConChina/blob/master/2016_ppt/01.%E9%99%88%E4%B9%98%E6%96%B9%20%E4%B8%80%E4%B8%AA%20Swift%20%E9%A1%B9%E7%9B%AE%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%8F%98%E8%BF%81.pdf\" target=\"_blank\" rel=\"noopener\">陈乘方 一个 Swift 项目网络层的变迁.pdf</a><br><a href=\"https://github.com/TifaTsubasa/TTReflect\" target=\"_blank\" rel=\"noopener\">TTReflect：json/data 转模型</a></p>\n</blockquote>\n<p><strong>最重要的:</strong>  <a href=\"https://github.com/TifaTsubasa/SwiftNetWorkFlow\" target=\"_blank\" rel=\"noopener\">项目源码</a></p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow\" alt=\"Alt text\"></p>\n<h4 id=\"1-网络请求层\"><a href=\"#1-网络请求层\" class=\"headerlink\" title=\"1.网络请求层\"></a>1.网络请求层</h4><p>网络请求层<code>NetworkKit</code>主要用来封装三方网络请求库，统一项目的网络请求方式，降低对于三方库的依赖性，并且负责将请求得到的data转为json数据</p>\n<h4 id=\"2-数据处理层\"><a href=\"#2-数据处理层\" class=\"headerlink\" title=\"2.数据处理层\"></a>2.数据处理层</h4><p>数据处理层<code>Loader</code>负责管理请求的链接、参数等，同时将json转化为能够直接调用的模型数组，尽可能为控制器减负</p>\n<h3 id=\"请求层\"><a href=\"#请求层\" class=\"headerlink\" title=\"请求层\"></a>请求层</h3><p>首先看一下重构之前的网络请求层</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetch</span><span class=\"params\">(type: HttpRequestType, URLString url: String, parameters para: [String: AnyObject]? = <span class=\"literal\">nil</span>, success: <span class=\"params\">(<span class=\"params\">(json: AnyObject)</span></span></span></span> -&gt; <span class=\"type\">Void</span>)?, error: ((statusCode: <span class=\"type\">Int</span>, json: <span class=\"type\">AnyObject</span>) -&gt; <span class=\"type\">Void</span>)?, failure: ((error: <span class=\"type\">ErrorType</span>?) -&gt; <span class=\"type\">Void</span>)? )</span><br></pre></td></tr></table></figure>\n<p>OC时代延续下来的代码，直接传入所有的请求参数和回调函数，调用起来极不灵活</p>\n<h4 id=\"1-Fluent-Interface\"><a href=\"#1-Fluent-Interface\" class=\"headerlink\" title=\"1.Fluent Interface\"></a>1.Fluent Interface</h4><p>新的网络类改用了实例方法来调用请求，并使用流式接口设计保证调用的灵活性</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以 url、params为例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkKit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url: <span class=\"type\">String</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> params: [<span class=\"type\">String</span>: <span class=\"type\">AnyObject</span>]?</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetch</span><span class=\"params\">(url: String)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.url = url</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">params</span><span class=\"params\">(params: [String: AnyObject])</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.params = params</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很容易理解的代码，每个函数保存相应的属性并返回自身实例，保证了链式调用</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NetworkKit</span>().fetch(<span class=\"string\">\"https://tsusolo.com\"</span>).params([<span class=\"string\">\"foo\"</span>: <span class=\"string\">\"11\"</span>])</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-请求结果分类\"><a href=\"#2-请求结果分类\" class=\"headerlink\" title=\"2.请求结果分类\"></a>2.请求结果分类</h4><p>与以往 成功/失败 两类请求结果不同的是，这里将请求结果分为三类：</p>\n<ul>\n<li>success：请求成功且返回了正确的结果，通常HTTP状态码为200</li>\n<li>error：    请求成功但返回了失败的信息，比如未找到资源、权限错误等</li>\n<li>failure： 请求失败，例如网络错误</li>\n</ul>\n<p>在NetworkKit中声明一下三种请求回调的类型，补充相应的流式接口<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkKit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">SuccessHandlerType</span> = (<span class=\"type\">AnyObject</span>? -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">ErrorHandlerType</span> = ((<span class=\"type\">Int</span>, <span class=\"type\">AnyObject</span>?) -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">FailureHandlerType</span> = (<span class=\"type\">NSError</span>? -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> successHandler: <span class=\"type\">SuccessType</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> errorHandler: <span class=\"type\">ErrorType</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> failureHandler: <span class=\"type\">FailureType</span>?</span><br><span class=\"line\">  <span class=\"comment\">// 以success为例，error、failure类似，详见源码</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">success</span><span class=\"params\">(handler: SuccessHandlerType)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.successHandler = handler</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在的调用应该是这样子<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NetworkKit</span>().fetch(<span class=\"string\">\"https://tsusolo.com\"</span>)</span><br><span class=\"line\">.success &#123; (json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">&#125;.error &#123; (code, errorJson) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(errorJson)</span><br><span class=\"line\">&#125;.failure &#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>请求时需要设置url、参数、header以及各类回调函数，Fluent Interface让NetworkKit在调用时自由增减参数，保证简洁性</p>\n</blockquote>\n<h4 id=\"3-请求和状况处理\"><a href=\"#3-请求和状况处理\" class=\"headerlink\" title=\"3.请求和状况处理\"></a>3.请求和状况处理</h4><p>网络请求上，这里使用了<code>Alamofire</code>并为此为例<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> httpRequest: <span class=\"type\">Request</span>?</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">request</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> url = url &#123;</span><br><span class=\"line\">      httpRequest = <span class=\"type\">Alamofire</span>.request(.<span class=\"type\">GET</span>, url, parameters: params, encoding: .<span class=\"type\">URL</span>, headers: headers)</span><br><span class=\"line\">        .response &#123; request, response, data, error <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> statusCode = response?.statusCode</span><br><span class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> statusCode = statusCode &#123;  <span class=\"comment\">// request success</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> json: <span class=\"type\">AnyObject</span>? = data.flatMap &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">try</span>? <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>($<span class=\"number\">0</span>, options: .<span class=\"type\">MutableContainers</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> statusCode == <span class=\"number\">200</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">self</span>.successHandler?(json)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">self</span>.errorHandler?(statusCode, json)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;                          <span class=\"comment\">// request failure</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.failureHandler?(error)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>request</code>方法中，将链式调用保存下来的参数，置入<code>Alamofire</code>并发起请求，在<code>Alamofire</code>的回调函数中，根据响应结果进行分类，分别调用相应状况的回调函数。</p>\n<blockquote>\n<p>1.这里使用了一个<code>httpRequest</code>保存了Alamofire的请求，可用于取消请求等操作<br>2.结果分类需要依据具体情况，示例中根据HTTP 200状态码来判断仅作为参考方式</p>\n</blockquote>\n<h4 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h4><p>使用豆瓣的电影API作为示例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略了error和failure的错误处理，看起来格外简洁 ^^</span></span><br><span class=\"line\"><span class=\"type\">NetworkKit</span>().fetch(<span class=\"string\">\"https://api.douban.com/v2/movie/subject/1764796\"</span>)</span><br><span class=\"line\">.success &#123; (json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">&#125;.request()</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型映射\"><a href=\"#模型映射\" class=\"headerlink\" title=\"模型映射\"></a>模型映射</h3><h4 id=\"1-TTReflect\"><a href=\"#1-TTReflect\" class=\"headerlink\" title=\"1.TTReflect\"></a>1.TTReflect</h4><p>在Objective-C时代，<code>JsonModel</code>、<code>MJExtension</code>、<code>Mantle</code>都是人气很高的json/model转换框架。年初开始探索Swift的时候，第一件事情就是寻找符合下列条件的Swift版json转model框架</p>\n<ul>\n<li>模型不需要继承其他的第三方类型</li>\n<li>模型不需要手写映射关系</li>\n<li>支持嵌套映射</li>\n</ul>\n<p>找了一圈发现并没有符合要求的框架，于是自己摸索一番，便有了现在的 <a href=\"https://github.com/TifaTsubasa/TTReflect\" target=\"_blank\" rel=\"noopener\">TTReflect</a>（目前已更新到2.0版本），具体用法参见<a href=\"https://github.com/TifaTsubasa/TTReflect\" target=\"_blank\" rel=\"noopener\">Github</a>，大概就是这样  ↓<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow-reflect\" alt=\"Alt text\"></p>\n<h4 id=\"2-映射函数-amp-模型的回调函数\"><a href=\"#2-映射函数-amp-模型的回调函数\" class=\"headerlink\" title=\"2.映射函数&amp;模型的回调函数\"></a>2.映射函数&amp;模型的回调函数</h4><p>不同的请求会返回不同的模型类型，需要为<code>NetworkKit</code>声明一个泛型，来标明模型类型并与<code>result</code>回调函数对应。同样使用Fluent Interface将json转换model的映射函数和<code>result</code>回调注入</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkKit</span>&lt;<span class=\"title\">Model</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">ResultHandlerType</span> = (<span class=\"type\">Model</span> -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">ReflectHandlerType</span> = (<span class=\"type\">AnyObject</span>? -&gt; <span class=\"type\">Model</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resultHanlder: <span class=\"type\">ResultHandlerType</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reflectHandler: <span class=\"type\">ReflectHandlerType</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">result</span><span class=\"params\">(handler: ResultHandlerType)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.resultHanlder = handler</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reflect</span><span class=\"params\">(f: ReflectHandlerType)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    reflectHandler = f</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-回调模型\"><a href=\"#3-回调模型\" class=\"headerlink\" title=\"3.回调模型\"></a>3.回调模型</h4><p>在请求方法<code>request</code>的<code>success</code>回调下，通过使用保存下来的映射函数，将json转换为相应的模型，并放入模型的回调中</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> statusCode == <span class=\"number\">200</span> &#123;          <span class=\"comment\">// request success &amp; response right</span></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.successHandler?(json)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> reflectHandler = <span class=\"keyword\">self</span>.reflectHandler &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.resultHandler?(reflectHandler(json))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>e.g.g</strong><br>调用时可以同时获得json和模型（以Movie模型为例）<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NetworkKit</span>&lt;<span class=\"type\">Movie</span>&gt;().fetch(<span class=\"string\">\"https://api.douban.com/v2/movie/subject/1764796\"</span>)</span><br><span class=\"line\">.<span class=\"built_in\">reflect</span> &#123; (json) -&gt; <span class=\"type\">Movie</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"type\">Reflect</span>&lt;<span class=\"type\">Movie</span>&gt;.mapObject(json: json)</span><br><span class=\"line\">&#125;.success(&#123; (json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">&#125;).result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(movie)</span><br><span class=\"line\">&#125;.request()</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在初始化Network时声明模型的类型，result回调函数就会返回指定类型的模型结果</p>\n</blockquote>\n<h3 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h3><p>当控制器做网络请求的时候，是不需要知道请求细节的，只需要发出请求、拿到结果就可以了。将模型声明，请求参数和转换方式封装起来在loader中，减轻控制器的负担<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieLoader</span>: <span class=\"title\">NetworkKit</span>&lt;<span class=\"title\">Movie</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">load</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.fetch(<span class=\"string\">\"https://api.douban.com/v2/movie/subject/1764796\"</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">reflect</span> &#123; (json) -&gt; <span class=\"type\">Movie</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"type\">Reflect</span>&lt;<span class=\"type\">Movie</span>&gt;.mapObject(json: json)</span><br><span class=\"line\">    &#125;.request()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实际调用的时候就非常简单了</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MovieLoader</span>().result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.titleLabel.text = movie.title</span><br><span class=\"line\">&#125;.error(&#123; (code, json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(code, json)</span><br><span class=\"line\">&#125;).failure(&#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \"</span>, error)</span><br><span class=\"line\">&#125;).load()</span><br></pre></td></tr></table></figure>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><h4 id=\"1-方法拓展\"><a href=\"#1-方法拓展\" class=\"headerlink\" title=\"1.方法拓展\"></a>1.方法拓展</h4><p>假设你的请求是下拉刷新的时候发出的，你的请求代码可能就变得惨不忍睹</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MovieLoader</span>().result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  tableView.endRefresh() <span class=\"comment\">// 停止刷新</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(movie)</span><br><span class=\"line\">&#125;.error(&#123; (code, json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  tableView.endRefresh()</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(code, json)</span><br><span class=\"line\">&#125;).failure(&#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  tableView.endRefresh()</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \"</span>, error)</span><br><span class=\"line\">&#125;).load()</span><br></pre></td></tr></table></figure>\n<p>以类似<code>success</code>回调的方式，为<code>Network</code>添加一个<code>finish</code>回调，在请求结束时直接调用（详见源码），将相应操作统一处理</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MovieLoader</span>().finish(&#123;</span><br><span class=\"line\">  tableView.endRefresh() <span class=\"comment\">// 停止刷新</span></span><br><span class=\"line\">&#125;).result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(movie)</span><br><span class=\"line\">&#125;.error(&#123; (code, json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(code, json)</span><br><span class=\"line\">&#125;).failure(&#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \"</span>, error)</span><br><span class=\"line\">&#125;).load()</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-复杂模型\"><a href=\"#2-复杂模型\" class=\"headerlink\" title=\"2.复杂模型\"></a>2.复杂模型</h4><p>再假设请求结果的json比较复杂，需要多个模型来承载，类似这样 ↓</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"aa\"</span>: &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"bb\"</span>: &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果这里需要AA和BB两个模型来映射到相应的json值上，可以利用Swift元组来实现</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loader</span>: <span class=\"title\">NetworkKit</span>&lt;(<span class=\"title\">AA</span>, <span class=\"title\">BB</span>)&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">load</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f: (<span class=\"type\">AnyObject</span>? -&gt; (<span class=\"type\">AA</span>, <span class=\"type\">BB</span>)) = &#123; j <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> aModel = <span class=\"type\">Reflect</span>&lt;<span class=\"type\">AA</span>&gt;.mapObject(json: j?[<span class=\"string\">\"aa\"</span>])</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bModel = <span class=\"type\">Reflect</span>&lt;<span class=\"type\">BB</span>&gt;.mapObject(json: j?[<span class=\"string\">\"bb\"</span>])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (aModel, bModel)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.fetch(someUrl).<span class=\"built_in\">reflect</span>(f).request()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里也可以使用更上层的模型同时包装AB类型，利用TTReflect的嵌套转换一次性搞定，根据实际需求使用</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>从4月swiftcon后开始构思，历经多次重构，参考了各类资料，在2.0版上动用各类特性后（可见源码 branch 2.0），最终在定稿的时候回归朴质，用最简单的方式来处理。</p>\n<p>网络请求是个挺复杂的问题，很多时候更依赖于实际情况，就比如你遇到了一个凡事都扔给你httpStatusCode 200的奇葩后端，你的请求状况分类就需要特别对待，再比如我的项目中的<code>error</code>回调，返回的是错误json中的message字段。也因此没有将文章的内容变成通用的lib，只是提供一份思路，旨在提供更优雅的请求方式</p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>这是一篇跳票了一万年的博客。。<br>网络请求是iOS端非常重要的一环，虽然有着诸如Alamofire等框架的加持，统一请求流程、简化请求代码依旧是需要仔细琢磨的事情<br>","more":"</p>\n<blockquote>\n<p>参考资料<br><a href=\"http://swift.gg/2016/02/16/async-errors/\" target=\"_blank\" rel=\"noopener\">如何处理 Swift 中的异步错误</a><br><a href=\"https://github.com/ThinkDevelopers/SwiftConChina/blob/master/2016_ppt/01.%E9%99%88%E4%B9%98%E6%96%B9%20%E4%B8%80%E4%B8%AA%20Swift%20%E9%A1%B9%E7%9B%AE%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%8F%98%E8%BF%81.pdf\" target=\"_blank\" rel=\"noopener\">陈乘方 一个 Swift 项目网络层的变迁.pdf</a><br><a href=\"https://github.com/TifaTsubasa/TTReflect\" target=\"_blank\" rel=\"noopener\">TTReflect：json/data 转模型</a></p>\n</blockquote>\n<p><strong>最重要的:</strong>  <a href=\"https://github.com/TifaTsubasa/SwiftNetWorkFlow\" target=\"_blank\" rel=\"noopener\">项目源码</a></p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow\" alt=\"Alt text\"></p>\n<h4 id=\"1-网络请求层\"><a href=\"#1-网络请求层\" class=\"headerlink\" title=\"1.网络请求层\"></a>1.网络请求层</h4><p>网络请求层<code>NetworkKit</code>主要用来封装三方网络请求库，统一项目的网络请求方式，降低对于三方库的依赖性，并且负责将请求得到的data转为json数据</p>\n<h4 id=\"2-数据处理层\"><a href=\"#2-数据处理层\" class=\"headerlink\" title=\"2.数据处理层\"></a>2.数据处理层</h4><p>数据处理层<code>Loader</code>负责管理请求的链接、参数等，同时将json转化为能够直接调用的模型数组，尽可能为控制器减负</p>\n<h3 id=\"请求层\"><a href=\"#请求层\" class=\"headerlink\" title=\"请求层\"></a>请求层</h3><p>首先看一下重构之前的网络请求层</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetch</span><span class=\"params\">(type: HttpRequestType, URLString url: String, parameters para: [String: AnyObject]? = <span class=\"literal\">nil</span>, success: <span class=\"params\">(<span class=\"params\">(json: AnyObject)</span></span></span></span> -&gt; <span class=\"type\">Void</span>)?, error: ((statusCode: <span class=\"type\">Int</span>, json: <span class=\"type\">AnyObject</span>) -&gt; <span class=\"type\">Void</span>)?, failure: ((error: <span class=\"type\">ErrorType</span>?) -&gt; <span class=\"type\">Void</span>)? )</span><br></pre></td></tr></table></figure>\n<p>OC时代延续下来的代码，直接传入所有的请求参数和回调函数，调用起来极不灵活</p>\n<h4 id=\"1-Fluent-Interface\"><a href=\"#1-Fluent-Interface\" class=\"headerlink\" title=\"1.Fluent Interface\"></a>1.Fluent Interface</h4><p>新的网络类改用了实例方法来调用请求，并使用流式接口设计保证调用的灵活性</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以 url、params为例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkKit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url: <span class=\"type\">String</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> params: [<span class=\"type\">String</span>: <span class=\"type\">AnyObject</span>]?</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetch</span><span class=\"params\">(url: String)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.url = url</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">params</span><span class=\"params\">(params: [String: AnyObject])</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.params = params</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很容易理解的代码，每个函数保存相应的属性并返回自身实例，保证了链式调用</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NetworkKit</span>().fetch(<span class=\"string\">\"https://tsusolo.com\"</span>).params([<span class=\"string\">\"foo\"</span>: <span class=\"string\">\"11\"</span>])</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-请求结果分类\"><a href=\"#2-请求结果分类\" class=\"headerlink\" title=\"2.请求结果分类\"></a>2.请求结果分类</h4><p>与以往 成功/失败 两类请求结果不同的是，这里将请求结果分为三类：</p>\n<ul>\n<li>success：请求成功且返回了正确的结果，通常HTTP状态码为200</li>\n<li>error：    请求成功但返回了失败的信息，比如未找到资源、权限错误等</li>\n<li>failure： 请求失败，例如网络错误</li>\n</ul>\n<p>在NetworkKit中声明一下三种请求回调的类型，补充相应的流式接口<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkKit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">SuccessHandlerType</span> = (<span class=\"type\">AnyObject</span>? -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">ErrorHandlerType</span> = ((<span class=\"type\">Int</span>, <span class=\"type\">AnyObject</span>?) -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">FailureHandlerType</span> = (<span class=\"type\">NSError</span>? -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> successHandler: <span class=\"type\">SuccessType</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> errorHandler: <span class=\"type\">ErrorType</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> failureHandler: <span class=\"type\">FailureType</span>?</span><br><span class=\"line\">  <span class=\"comment\">// 以success为例，error、failure类似，详见源码</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">success</span><span class=\"params\">(handler: SuccessHandlerType)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.successHandler = handler</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在的调用应该是这样子<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NetworkKit</span>().fetch(<span class=\"string\">\"https://tsusolo.com\"</span>)</span><br><span class=\"line\">.success &#123; (json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">&#125;.error &#123; (code, errorJson) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(errorJson)</span><br><span class=\"line\">&#125;.failure &#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>请求时需要设置url、参数、header以及各类回调函数，Fluent Interface让NetworkKit在调用时自由增减参数，保证简洁性</p>\n</blockquote>\n<h4 id=\"3-请求和状况处理\"><a href=\"#3-请求和状况处理\" class=\"headerlink\" title=\"3.请求和状况处理\"></a>3.请求和状况处理</h4><p>网络请求上，这里使用了<code>Alamofire</code>并为此为例<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> httpRequest: <span class=\"type\">Request</span>?</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">request</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> url = url &#123;</span><br><span class=\"line\">      httpRequest = <span class=\"type\">Alamofire</span>.request(.<span class=\"type\">GET</span>, url, parameters: params, encoding: .<span class=\"type\">URL</span>, headers: headers)</span><br><span class=\"line\">        .response &#123; request, response, data, error <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> statusCode = response?.statusCode</span><br><span class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> statusCode = statusCode &#123;  <span class=\"comment\">// request success</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> json: <span class=\"type\">AnyObject</span>? = data.flatMap &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">try</span>? <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>($<span class=\"number\">0</span>, options: .<span class=\"type\">MutableContainers</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> statusCode == <span class=\"number\">200</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">self</span>.successHandler?(json)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">self</span>.errorHandler?(statusCode, json)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;                          <span class=\"comment\">// request failure</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.failureHandler?(error)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>request</code>方法中，将链式调用保存下来的参数，置入<code>Alamofire</code>并发起请求，在<code>Alamofire</code>的回调函数中，根据响应结果进行分类，分别调用相应状况的回调函数。</p>\n<blockquote>\n<p>1.这里使用了一个<code>httpRequest</code>保存了Alamofire的请求，可用于取消请求等操作<br>2.结果分类需要依据具体情况，示例中根据HTTP 200状态码来判断仅作为参考方式</p>\n</blockquote>\n<h4 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h4><p>使用豆瓣的电影API作为示例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 省略了error和failure的错误处理，看起来格外简洁 ^^</span></span><br><span class=\"line\"><span class=\"type\">NetworkKit</span>().fetch(<span class=\"string\">\"https://api.douban.com/v2/movie/subject/1764796\"</span>)</span><br><span class=\"line\">.success &#123; (json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">&#125;.request()</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型映射\"><a href=\"#模型映射\" class=\"headerlink\" title=\"模型映射\"></a>模型映射</h3><h4 id=\"1-TTReflect\"><a href=\"#1-TTReflect\" class=\"headerlink\" title=\"1.TTReflect\"></a>1.TTReflect</h4><p>在Objective-C时代，<code>JsonModel</code>、<code>MJExtension</code>、<code>Mantle</code>都是人气很高的json/model转换框架。年初开始探索Swift的时候，第一件事情就是寻找符合下列条件的Swift版json转model框架</p>\n<ul>\n<li>模型不需要继承其他的第三方类型</li>\n<li>模型不需要手写映射关系</li>\n<li>支持嵌套映射</li>\n</ul>\n<p>找了一圈发现并没有符合要求的框架，于是自己摸索一番，便有了现在的 <a href=\"https://github.com/TifaTsubasa/TTReflect\" target=\"_blank\" rel=\"noopener\">TTReflect</a>（目前已更新到2.0版本），具体用法参见<a href=\"https://github.com/TifaTsubasa/TTReflect\" target=\"_blank\" rel=\"noopener\">Github</a>，大概就是这样  ↓<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/swift_network_flow/swift-network-flow-reflect\" alt=\"Alt text\"></p>\n<h4 id=\"2-映射函数-amp-模型的回调函数\"><a href=\"#2-映射函数-amp-模型的回调函数\" class=\"headerlink\" title=\"2.映射函数&amp;模型的回调函数\"></a>2.映射函数&amp;模型的回调函数</h4><p>不同的请求会返回不同的模型类型，需要为<code>NetworkKit</code>声明一个泛型，来标明模型类型并与<code>result</code>回调函数对应。同样使用Fluent Interface将json转换model的映射函数和<code>result</code>回调注入</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkKit</span>&lt;<span class=\"title\">Model</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">ResultHandlerType</span> = (<span class=\"type\">Model</span> -&gt; <span class=\"type\">Void</span>)</span><br><span class=\"line\">  <span class=\"keyword\">typealias</span> <span class=\"type\">ReflectHandlerType</span> = (<span class=\"type\">AnyObject</span>? -&gt; <span class=\"type\">Model</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resultHanlder: <span class=\"type\">ResultHandlerType</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reflectHandler: <span class=\"type\">ReflectHandlerType</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">result</span><span class=\"params\">(handler: ResultHandlerType)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.resultHanlder = handler</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reflect</span><span class=\"params\">(f: ReflectHandlerType)</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    reflectHandler = f</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-回调模型\"><a href=\"#3-回调模型\" class=\"headerlink\" title=\"3.回调模型\"></a>3.回调模型</h4><p>在请求方法<code>request</code>的<code>success</code>回调下，通过使用保存下来的映射函数，将json转换为相应的模型，并放入模型的回调中</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> statusCode == <span class=\"number\">200</span> &#123;          <span class=\"comment\">// request success &amp; response right</span></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.successHandler?(json)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> reflectHandler = <span class=\"keyword\">self</span>.reflectHandler &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.resultHandler?(reflectHandler(json))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>e.g.g</strong><br>调用时可以同时获得json和模型（以Movie模型为例）<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NetworkKit</span>&lt;<span class=\"type\">Movie</span>&gt;().fetch(<span class=\"string\">\"https://api.douban.com/v2/movie/subject/1764796\"</span>)</span><br><span class=\"line\">.<span class=\"built_in\">reflect</span> &#123; (json) -&gt; <span class=\"type\">Movie</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"type\">Reflect</span>&lt;<span class=\"type\">Movie</span>&gt;.mapObject(json: json)</span><br><span class=\"line\">&#125;.success(&#123; (json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">&#125;).result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(movie)</span><br><span class=\"line\">&#125;.request()</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在初始化Network时声明模型的类型，result回调函数就会返回指定类型的模型结果</p>\n</blockquote>\n<h3 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h3><p>当控制器做网络请求的时候，是不需要知道请求细节的，只需要发出请求、拿到结果就可以了。将模型声明，请求参数和转换方式封装起来在loader中，减轻控制器的负担<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieLoader</span>: <span class=\"title\">NetworkKit</span>&lt;<span class=\"title\">Movie</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">load</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.fetch(<span class=\"string\">\"https://api.douban.com/v2/movie/subject/1764796\"</span>)</span><br><span class=\"line\">    .<span class=\"built_in\">reflect</span> &#123; (json) -&gt; <span class=\"type\">Movie</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"type\">Reflect</span>&lt;<span class=\"type\">Movie</span>&gt;.mapObject(json: json)</span><br><span class=\"line\">    &#125;.request()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实际调用的时候就非常简单了</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MovieLoader</span>().result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.titleLabel.text = movie.title</span><br><span class=\"line\">&#125;.error(&#123; (code, json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(code, json)</span><br><span class=\"line\">&#125;).failure(&#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \"</span>, error)</span><br><span class=\"line\">&#125;).load()</span><br></pre></td></tr></table></figure>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h3><h4 id=\"1-方法拓展\"><a href=\"#1-方法拓展\" class=\"headerlink\" title=\"1.方法拓展\"></a>1.方法拓展</h4><p>假设你的请求是下拉刷新的时候发出的，你的请求代码可能就变得惨不忍睹</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MovieLoader</span>().result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  tableView.endRefresh() <span class=\"comment\">// 停止刷新</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(movie)</span><br><span class=\"line\">&#125;.error(&#123; (code, json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  tableView.endRefresh()</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(code, json)</span><br><span class=\"line\">&#125;).failure(&#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  tableView.endRefresh()</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \"</span>, error)</span><br><span class=\"line\">&#125;).load()</span><br></pre></td></tr></table></figure>\n<p>以类似<code>success</code>回调的方式，为<code>Network</code>添加一个<code>finish</code>回调，在请求结束时直接调用（详见源码），将相应操作统一处理</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MovieLoader</span>().finish(&#123;</span><br><span class=\"line\">  tableView.endRefresh() <span class=\"comment\">// 停止刷新</span></span><br><span class=\"line\">&#125;).result &#123; (movie) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(movie)</span><br><span class=\"line\">&#125;.error(&#123; (code, json) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(code, json)</span><br><span class=\"line\">&#125;).failure(&#123; (error) <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"error: \"</span>, error)</span><br><span class=\"line\">&#125;).load()</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-复杂模型\"><a href=\"#2-复杂模型\" class=\"headerlink\" title=\"2.复杂模型\"></a>2.复杂模型</h4><p>再假设请求结果的json比较复杂，需要多个模型来承载，类似这样 ↓</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"aa\"</span>: &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"bb\"</span>: &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果这里需要AA和BB两个模型来映射到相应的json值上，可以利用Swift元组来实现</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Loader</span>: <span class=\"title\">NetworkKit</span>&lt;(<span class=\"title\">AA</span>, <span class=\"title\">BB</span>)&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">load</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Self</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> f: (<span class=\"type\">AnyObject</span>? -&gt; (<span class=\"type\">AA</span>, <span class=\"type\">BB</span>)) = &#123; j <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> aModel = <span class=\"type\">Reflect</span>&lt;<span class=\"type\">AA</span>&gt;.mapObject(json: j?[<span class=\"string\">\"aa\"</span>])</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bModel = <span class=\"type\">Reflect</span>&lt;<span class=\"type\">BB</span>&gt;.mapObject(json: j?[<span class=\"string\">\"bb\"</span>])</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (aModel, bModel)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.fetch(someUrl).<span class=\"built_in\">reflect</span>(f).request()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里也可以使用更上层的模型同时包装AB类型，利用TTReflect的嵌套转换一次性搞定，根据实际需求使用</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>从4月swiftcon后开始构思，历经多次重构，参考了各类资料，在2.0版上动用各类特性后（可见源码 branch 2.0），最终在定稿的时候回归朴质，用最简单的方式来处理。</p>\n<p>网络请求是个挺复杂的问题，很多时候更依赖于实际情况，就比如你遇到了一个凡事都扔给你httpStatusCode 200的奇葩后端，你的请求状况分类就需要特别对待，再比如我的项目中的<code>error</code>回调，返回的是错误json中的message字段。也因此没有将文章的内容变成通用的lib，只是提供一份思路，旨在提供更优雅的请求方式</p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>"},{"title":"自定义navigation controller过渡动画 2","date":"2016-02-18T07:33:04.000Z","_content":"\n来自于[PeteC/InteractiveViewControllerTransitions](https://github.com/PeteC/InteractiveViewControllerTransitions)的定制过渡效果，这是个人非常喜欢的一种动画方式，习惯于成为**元素重用**，本章将要用Swift重写这个项目，掌握针对于页面的过渡动画，让自己的APP更具个性化。\n\n[源码见Github](https://github.com/TifaTsubasa/SwiftTransitionExample)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif)\n<!-- more -->\n页面定制化的过渡方式同样依赖于`UIViewControllerAnimatedTransitioning`, 如果还不是很了解，可以复习一下[自定义navigation controller过渡动画](http://tsusolo.com/2016/02/18/custom_navigation_transition.html)\n\n---\n### 设计思路\n* 整个过渡动画的核心在于图片的移动，看上去是将tableViewCell上的图片移动到下一页控制器的view上，实际上我们会拷贝一份imageView从cell的位置移动到视图中心\n* 动画的其他部分无非与设置各个view的透明度\n\n### 步骤\n#### 1.初始化项目\n* 两层控制器\n* 相应的视图和模型\n* push和pop动画接口\n* 资源文件，详见[源码](https://github.com/TifaTsubasa/SwiftTransitionExample)\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-finder.png)\n* 控制器的初始化\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page1.png)\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page2.png)\n初始化的过程比较重复，copy相应的代码就好\n> Swift Tip:\n有一段初始化数据的代码比较有意思，可以感受一下\n这里用到了`lazy`关键字进行懒加载，避免了oc里的判断。在赋值的右边，用到了一个匿名函数，并且紧接括号执行返回数组，比较类似于JavaScript的匿名立即执行函数\n``` swift\n    lazy var things: [TTThing] = {\n        let arr = []  // 通过字面量设置数组\n        return arr\n    }()\n```\n\n\n\n#### 2.设置过渡动画\n上一章已经详细说明过渡动画的设置方式，这里就直接进入核心部分----**动画效果的处理**\n##### 1.过场时间设置\n依旧以push过场为例，在新建的`TTCustomPushAnimation.swift`文件内，首先实现\n``` swift\nfunc transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {\n    return 1\n}\n```\n设置过场时间为1s，1秒的速度方便调试\n\n##### 2.view获取\n然后来到动画大剧场\n``` swift\nfunc animateTransition(transitionContext: UIViewControllerContextTransitioning)\n```\n在`animateTransition`内中设置\n取得动画所需view\n``` swift\nlet containerView = transitionContext.containerView()\nlet fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey) as! TTCustomFromController\nlet toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey) as! TTCustomToController\nlet cell = fromVc.collection.cellForItemAtIndexPath((fromVc.collection.indexPathsForSelectedItems()?.first)!) as! TTThingCell\nlet snapImageView = cell.imgView.snapshotViewAfterScreenUpdates(false)\n```\n除了过场必要的containerView、fromVc、toVc之外，我们还要通过collection取得点击的cell，并将这个cell上的ImageView拷贝成`snapImageView`备用\n\n  > Swift Tip:\n这里在取得fromVc、toVc、cell时都用到了`as!`进行强制类型转换，加上感叹号避免在之后调用中的可选解析\n，但是在逻辑上就需要保证相应类型的正确，后面的代码会做相应类型保护\n\n##### 3.过场参数设置\n除了必要的动画时间,还需要获得`snapImageView`在动画中的起始frame和终止frame(frame同时影响位置和大小)\n``` swift\nlet duration = self.transitionDuration(transitionContext)\nlet startFrame = cell.imgView.superview!.convertRect(cell.imgView.frame, toView: containerView)\nlet finalFrame = toVc.view.convertRect(toVc.imgView.frame, toView: containerView)\n```\n记得动画舞台`containerView`么，`snapImageView`会在整个过场中置于其中进行动画操作，所以我们使用`convertRect`将Cell上imageView的frame转换到containerView作为起始frame，将toVc上imageView转换到containerView作为终止frame\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/animation-demo.png)\n\n##### 4.动画初始化\n获得所有动画所需的属性后，接下来就是动画的准备活动了\n1.将toVc的视图和snapImageView添加到containerView上\n2.将snapImageView的frame设置到起始frame，以覆盖Cell上的imageView，并将Cell的imageView隐藏\n3.将toVc的视图透明度设置为0，并隐藏toVc上的imageView\n``` swift\ncontainerView?.addSubview(toVc.view)\ncontainerView?.addSubview(snapImageView)\n\nsnapImageView.frame = startFrame\ncell.imgView.hidden = true\ntoVc.view.alpha = 0\ntoVc.imgView.hidden = true\n```\n\n##### 5.动画设置\n在整个动画中只有2个流程\n1.让toVc的视图逐渐显示出来\n2.将snapImageView移动到终止frame\n``` swift\nUIView.animateWithDuration(duration, animations: { () -> Void in\n    toVc.view.alpha = 1\n    snapImageView.frame = finalFrame\n    }) { (finished) -> Void in\n        toVc.imgView.hidden = false\n        cell.imgView.hidden = false\n        snapImageView.removeFromSuperview()\n        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n}\n```\n动画结束之后，记得收场哦\n1.移除snapImageView，并将toVc上的imageView显示出来\n2.将cell上的imageView恢复显示\n3.清除过场\n\n#### 3.设置push控制器\n老规矩，上述操作写好了剧本，得让演员上台表演了。由于这里是定制的过场动画，并不能重写导航去影响所有的过场，所以需要指定的演员`TTCustomFirstController`\n在TTCustomFirstController中，添加`UINavigationControllerDelegate`，显示控制器时添加代码，不显示时移除\n``` swift\noverride func viewWillAppear(animated: Bool) {\n    super.viewWillAppear(animated)\n    self.navigationController?.delegate = self\n}\n\noverride func viewWillDisappear(animated: Bool) {\n    super.viewWillDisappear(animated)\n    if let _ = self.navigationController?.delegate {\n        self.navigationController?.delegate = nil\n    }\n}\n```\n\n然后声明此控制器的过场方式\n``` swift\nfunc navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n    if fromVC == self && toVC is TTCustomSecondController {\n        return TTCustomPushAnimation()\n    }\n    return nil\n}\n```\n在导航的代理方法中，我们返回了自定义的过场动画接口，并对fromVc和toVc都做了类型判断，还记得我们在上面用到的`as!`强制类型转换么，这里的判断能保证类型的正确使用\n重启程序，push的过场已经和预期的是一样的了 ☺️\n\n#### 4.设置pop动画\npush动画已经设置完毕，pop动画依旧是push的逆向过程\n##### 1.初始化pop过场动画\n新建`TTCustomPopAnimation`，实现UIViewControllerAnimatedTransitioning的两个方法，这里直接贴出pop动画的设置代码\n**依旧需要注意的是fromVc和toVc对应的控制器**\n``` swift\nfunc animateTransition(transitionContext: UIViewControllerContextTransitioning) {\n    let containerView = transitionContext.containerView()\n    let fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey) as! TTCustomSecondController\n    let toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey) as! TTCustomFirstController\n    let selectedCell = toVc.collection.cellForItemAtIndexPath(toVc.selectedIndex!) as! TTThingCell\n    let snapImgView = fromVc.imgView.snapshotViewAfterScreenUpdates(false)\n\n    let duration = self.transitionDuration(transitionContext)\n    let startFrame = fromVc.view.convertRect(fromVc.imgView.frame, toView: containerView)\n    let finalFrame = selectedCell.imgView.convertRect(selectedCell.imgView.frame, toView: containerView)\n\n    snapImgView.frame = startFrame\n    fromVc.imgView.hidden = true\n    toVc.view.alpha = 0\n\n    containerView?.insertSubview(toVc.view, belowSubview: fromVc.view)\n    containerView?.addSubview(snapImgView)\n\n    UIView.animateWithDuration(duration, animations: { () -> Void in\n        toVc.view.alpha = 1\n        fromVc.view.alpha = 0\n        snapImgView.frame = finalFrame\n        }) { (finished) -> Void in\n            fromVc.imgView.hidden = false\n            selectedCell.imgView.hidden = false\n            snapImgView.removeFromSuperview()\n            transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n    }\n}\n```\npop动画的设置还是有几个小坑的：\n1.需要取得控制器跳转前点击的那个cell，这里采用了简化的方法，在cell点击时，将index记录在`selectedIndex`，方便pop的时候直接取用\n2.注意各个视图透明度和hidden的控制\n\n##### 2.设置pop控制器\n重复设置push控制器的流程，在`TTCustomSecondController`中，添加UINavigationControllerDelegate并实现导航代理方法\n``` swift\nfunc navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n    if fromVC.isEqual(self) && toVC is TTCustomFirstController {\n        return TTCustomPopAnimation()\n    }\n    return nil\n}\n```\n再次启动项目，pop的动画也能够正常工作了\n\n#### 5.手势返回\n跟之前一样，自定义过场之后，右划手势返回会失效，需要重新设置，这里就不重复这部分内容了，但是新的手势需要加到`TTCustomSecondController`控制器内，[自定义手势](http://tsusolo.com/2016/02/01/custom_navigation_transition.html#6-__u53F3_u5212_u8FD4_u56DE_u624B_u52BF)\n\n---\n\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n","source":"_posts/自定义navigation controller过渡动画 2.md","raw":"title: 自定义navigation controller过渡动画 2\ndate: 2016-02-18 15:33:04\ncategories: Swift过渡指南\npermalink: custom_navigation_transition_2\n---\n\n来自于[PeteC/InteractiveViewControllerTransitions](https://github.com/PeteC/InteractiveViewControllerTransitions)的定制过渡效果，这是个人非常喜欢的一种动画方式，习惯于成为**元素重用**，本章将要用Swift重写这个项目，掌握针对于页面的过渡动画，让自己的APP更具个性化。\n\n[源码见Github](https://github.com/TifaTsubasa/SwiftTransitionExample)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif)\n<!-- more -->\n页面定制化的过渡方式同样依赖于`UIViewControllerAnimatedTransitioning`, 如果还不是很了解，可以复习一下[自定义navigation controller过渡动画](http://tsusolo.com/2016/02/18/custom_navigation_transition.html)\n\n---\n### 设计思路\n* 整个过渡动画的核心在于图片的移动，看上去是将tableViewCell上的图片移动到下一页控制器的view上，实际上我们会拷贝一份imageView从cell的位置移动到视图中心\n* 动画的其他部分无非与设置各个view的透明度\n\n### 步骤\n#### 1.初始化项目\n* 两层控制器\n* 相应的视图和模型\n* push和pop动画接口\n* 资源文件，详见[源码](https://github.com/TifaTsubasa/SwiftTransitionExample)\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-finder.png)\n* 控制器的初始化\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page1.png)\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page2.png)\n初始化的过程比较重复，copy相应的代码就好\n> Swift Tip:\n有一段初始化数据的代码比较有意思，可以感受一下\n这里用到了`lazy`关键字进行懒加载，避免了oc里的判断。在赋值的右边，用到了一个匿名函数，并且紧接括号执行返回数组，比较类似于JavaScript的匿名立即执行函数\n``` swift\n    lazy var things: [TTThing] = {\n        let arr = []  // 通过字面量设置数组\n        return arr\n    }()\n```\n\n\n\n#### 2.设置过渡动画\n上一章已经详细说明过渡动画的设置方式，这里就直接进入核心部分----**动画效果的处理**\n##### 1.过场时间设置\n依旧以push过场为例，在新建的`TTCustomPushAnimation.swift`文件内，首先实现\n``` swift\nfunc transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {\n    return 1\n}\n```\n设置过场时间为1s，1秒的速度方便调试\n\n##### 2.view获取\n然后来到动画大剧场\n``` swift\nfunc animateTransition(transitionContext: UIViewControllerContextTransitioning)\n```\n在`animateTransition`内中设置\n取得动画所需view\n``` swift\nlet containerView = transitionContext.containerView()\nlet fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey) as! TTCustomFromController\nlet toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey) as! TTCustomToController\nlet cell = fromVc.collection.cellForItemAtIndexPath((fromVc.collection.indexPathsForSelectedItems()?.first)!) as! TTThingCell\nlet snapImageView = cell.imgView.snapshotViewAfterScreenUpdates(false)\n```\n除了过场必要的containerView、fromVc、toVc之外，我们还要通过collection取得点击的cell，并将这个cell上的ImageView拷贝成`snapImageView`备用\n\n  > Swift Tip:\n这里在取得fromVc、toVc、cell时都用到了`as!`进行强制类型转换，加上感叹号避免在之后调用中的可选解析\n，但是在逻辑上就需要保证相应类型的正确，后面的代码会做相应类型保护\n\n##### 3.过场参数设置\n除了必要的动画时间,还需要获得`snapImageView`在动画中的起始frame和终止frame(frame同时影响位置和大小)\n``` swift\nlet duration = self.transitionDuration(transitionContext)\nlet startFrame = cell.imgView.superview!.convertRect(cell.imgView.frame, toView: containerView)\nlet finalFrame = toVc.view.convertRect(toVc.imgView.frame, toView: containerView)\n```\n记得动画舞台`containerView`么，`snapImageView`会在整个过场中置于其中进行动画操作，所以我们使用`convertRect`将Cell上imageView的frame转换到containerView作为起始frame，将toVc上imageView转换到containerView作为终止frame\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/animation-demo.png)\n\n##### 4.动画初始化\n获得所有动画所需的属性后，接下来就是动画的准备活动了\n1.将toVc的视图和snapImageView添加到containerView上\n2.将snapImageView的frame设置到起始frame，以覆盖Cell上的imageView，并将Cell的imageView隐藏\n3.将toVc的视图透明度设置为0，并隐藏toVc上的imageView\n``` swift\ncontainerView?.addSubview(toVc.view)\ncontainerView?.addSubview(snapImageView)\n\nsnapImageView.frame = startFrame\ncell.imgView.hidden = true\ntoVc.view.alpha = 0\ntoVc.imgView.hidden = true\n```\n\n##### 5.动画设置\n在整个动画中只有2个流程\n1.让toVc的视图逐渐显示出来\n2.将snapImageView移动到终止frame\n``` swift\nUIView.animateWithDuration(duration, animations: { () -> Void in\n    toVc.view.alpha = 1\n    snapImageView.frame = finalFrame\n    }) { (finished) -> Void in\n        toVc.imgView.hidden = false\n        cell.imgView.hidden = false\n        snapImageView.removeFromSuperview()\n        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n}\n```\n动画结束之后，记得收场哦\n1.移除snapImageView，并将toVc上的imageView显示出来\n2.将cell上的imageView恢复显示\n3.清除过场\n\n#### 3.设置push控制器\n老规矩，上述操作写好了剧本，得让演员上台表演了。由于这里是定制的过场动画，并不能重写导航去影响所有的过场，所以需要指定的演员`TTCustomFirstController`\n在TTCustomFirstController中，添加`UINavigationControllerDelegate`，显示控制器时添加代码，不显示时移除\n``` swift\noverride func viewWillAppear(animated: Bool) {\n    super.viewWillAppear(animated)\n    self.navigationController?.delegate = self\n}\n\noverride func viewWillDisappear(animated: Bool) {\n    super.viewWillDisappear(animated)\n    if let _ = self.navigationController?.delegate {\n        self.navigationController?.delegate = nil\n    }\n}\n```\n\n然后声明此控制器的过场方式\n``` swift\nfunc navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n    if fromVC == self && toVC is TTCustomSecondController {\n        return TTCustomPushAnimation()\n    }\n    return nil\n}\n```\n在导航的代理方法中，我们返回了自定义的过场动画接口，并对fromVc和toVc都做了类型判断，还记得我们在上面用到的`as!`强制类型转换么，这里的判断能保证类型的正确使用\n重启程序，push的过场已经和预期的是一样的了 ☺️\n\n#### 4.设置pop动画\npush动画已经设置完毕，pop动画依旧是push的逆向过程\n##### 1.初始化pop过场动画\n新建`TTCustomPopAnimation`，实现UIViewControllerAnimatedTransitioning的两个方法，这里直接贴出pop动画的设置代码\n**依旧需要注意的是fromVc和toVc对应的控制器**\n``` swift\nfunc animateTransition(transitionContext: UIViewControllerContextTransitioning) {\n    let containerView = transitionContext.containerView()\n    let fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey) as! TTCustomSecondController\n    let toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey) as! TTCustomFirstController\n    let selectedCell = toVc.collection.cellForItemAtIndexPath(toVc.selectedIndex!) as! TTThingCell\n    let snapImgView = fromVc.imgView.snapshotViewAfterScreenUpdates(false)\n\n    let duration = self.transitionDuration(transitionContext)\n    let startFrame = fromVc.view.convertRect(fromVc.imgView.frame, toView: containerView)\n    let finalFrame = selectedCell.imgView.convertRect(selectedCell.imgView.frame, toView: containerView)\n\n    snapImgView.frame = startFrame\n    fromVc.imgView.hidden = true\n    toVc.view.alpha = 0\n\n    containerView?.insertSubview(toVc.view, belowSubview: fromVc.view)\n    containerView?.addSubview(snapImgView)\n\n    UIView.animateWithDuration(duration, animations: { () -> Void in\n        toVc.view.alpha = 1\n        fromVc.view.alpha = 0\n        snapImgView.frame = finalFrame\n        }) { (finished) -> Void in\n            fromVc.imgView.hidden = false\n            selectedCell.imgView.hidden = false\n            snapImgView.removeFromSuperview()\n            transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n    }\n}\n```\npop动画的设置还是有几个小坑的：\n1.需要取得控制器跳转前点击的那个cell，这里采用了简化的方法，在cell点击时，将index记录在`selectedIndex`，方便pop的时候直接取用\n2.注意各个视图透明度和hidden的控制\n\n##### 2.设置pop控制器\n重复设置push控制器的流程，在`TTCustomSecondController`中，添加UINavigationControllerDelegate并实现导航代理方法\n``` swift\nfunc navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n    if fromVC.isEqual(self) && toVC is TTCustomFirstController {\n        return TTCustomPopAnimation()\n    }\n    return nil\n}\n```\n再次启动项目，pop的动画也能够正常工作了\n\n#### 5.手势返回\n跟之前一样，自定义过场之后，右划手势返回会失效，需要重新设置，这里就不重复这部分内容了，但是新的手势需要加到`TTCustomSecondController`控制器内，[自定义手势](http://tsusolo.com/2016/02/01/custom_navigation_transition.html#6-__u53F3_u5212_u8FD4_u56DE_u624B_u52BF)\n\n---\n\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n","slug":"custom_navigation_transition_2","published":1,"updated":"2017-12-01T07:34:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjannaza700081rnrhbiu8pf6","content":"<p>来自于<a href=\"https://github.com/PeteC/InteractiveViewControllerTransitions\" target=\"_blank\" rel=\"noopener\">PeteC/InteractiveViewControllerTransitions</a>的定制过渡效果，这是个人非常喜欢的一种动画方式，习惯于成为<strong>元素重用</strong>，本章将要用Swift重写这个项目，掌握针对于页面的过渡动画，让自己的APP更具个性化。</p>\n<p><a href=\"https://github.com/TifaTsubasa/SwiftTransitionExample\" target=\"_blank\" rel=\"noopener\">源码见Github</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif\" alt=\"\"><br><a id=\"more\"></a><br>页面定制化的过渡方式同样依赖于<code>UIViewControllerAnimatedTransitioning</code>, 如果还不是很了解，可以复习一下<a href=\"http://tsusolo.com/2016/02/18/custom_navigation_transition.html\">自定义navigation controller过渡动画</a></p>\n<hr>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><ul>\n<li>整个过渡动画的核心在于图片的移动，看上去是将tableViewCell上的图片移动到下一页控制器的view上，实际上我们会拷贝一份imageView从cell的位置移动到视图中心</li>\n<li>动画的其他部分无非与设置各个view的透明度</li>\n</ul>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"1.初始化项目\"></a>1.初始化项目</h4><ul>\n<li>两层控制器</li>\n<li>相应的视图和模型</li>\n<li>push和pop动画接口</li>\n<li>资源文件，详见<a href=\"https://github.com/TifaTsubasa/SwiftTransitionExample\" target=\"_blank\" rel=\"noopener\">源码</a><br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-finder.png\" alt=\"\"></li>\n<li>控制器的初始化<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page1.png\" alt=\"\"><br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page2.png\" alt=\"\"><br>初始化的过程比较重复，copy相应的代码就好<blockquote>\n<p>Swift Tip:<br>有一段初始化数据的代码比较有意思，可以感受一下<br>这里用到了<code>lazy</code>关键字进行懒加载，避免了oc里的判断。在赋值的右边，用到了一个匿名函数，并且紧接括号执行返回数组，比较类似于JavaScript的匿名立即执行函数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> things: [<span class=\"type\">TTThing</span>] = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []  <span class=\"comment\">// 通过字面量设置数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-设置过渡动画\"><a href=\"#2-设置过渡动画\" class=\"headerlink\" title=\"2.设置过渡动画\"></a>2.设置过渡动画</h4><p>上一章已经详细说明过渡动画的设置方式，这里就直接进入核心部分—-<strong>动画效果的处理</strong></p>\n<h5 id=\"1-过场时间设置\"><a href=\"#1-过场时间设置\" class=\"headerlink\" title=\"1.过场时间设置\"></a>1.过场时间设置</h5><p>依旧以push过场为例，在新建的<code>TTCustomPushAnimation.swift</code>文件内，首先实现<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">transitionDuration</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class=\"type\">NSTimeInterval</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置过场时间为1s，1秒的速度方便调试</p>\n<h5 id=\"2-view获取\"><a href=\"#2-view获取\" class=\"headerlink\" title=\"2.view获取\"></a>2.view获取</h5><p>然后来到动画大剧场<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>在<code>animateTransition</code>内中设置<br>取得动画所需view<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> containerView = transitionContext.containerView()</span><br><span class=\"line\"><span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomFromController</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomToController</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cell = fromVc.collection.cellForItemAtIndexPath((fromVc.collection.indexPathsForSelectedItems()?.first)!) <span class=\"keyword\">as</span>! <span class=\"type\">TTThingCell</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> snapImageView = cell.imgView.snapshotViewAfterScreenUpdates(<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></p>\n<p>除了过场必要的containerView、fromVc、toVc之外，我们还要通过collection取得点击的cell，并将这个cell上的ImageView拷贝成<code>snapImageView</code>备用</p>\n<blockquote>\n<p>Swift Tip:<br>这里在取得fromVc、toVc、cell时都用到了<code>as!</code>进行强制类型转换，加上感叹号避免在之后调用中的可选解析<br>，但是在逻辑上就需要保证相应类型的正确，后面的代码会做相应类型保护</p>\n</blockquote>\n<h5 id=\"3-过场参数设置\"><a href=\"#3-过场参数设置\" class=\"headerlink\" title=\"3.过场参数设置\"></a>3.过场参数设置</h5><p>除了必要的动画时间,还需要获得<code>snapImageView</code>在动画中的起始frame和终止frame(frame同时影响位置和大小)<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)</span><br><span class=\"line\"><span class=\"keyword\">let</span> startFrame = cell.imgView.superview!.convertRect(cell.imgView.frame, toView: containerView)</span><br><span class=\"line\"><span class=\"keyword\">let</span> finalFrame = toVc.view.convertRect(toVc.imgView.frame, toView: containerView)</span><br></pre></td></tr></table></figure></p>\n<p>记得动画舞台<code>containerView</code>么，<code>snapImageView</code>会在整个过场中置于其中进行动画操作，所以我们使用<code>convertRect</code>将Cell上imageView的frame转换到containerView作为起始frame，将toVc上imageView转换到containerView作为终止frame<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/animation-demo.png\" alt=\"\"></p>\n<h5 id=\"4-动画初始化\"><a href=\"#4-动画初始化\" class=\"headerlink\" title=\"4.动画初始化\"></a>4.动画初始化</h5><p>获得所有动画所需的属性后，接下来就是动画的准备活动了<br>1.将toVc的视图和snapImageView添加到containerView上<br>2.将snapImageView的frame设置到起始frame，以覆盖Cell上的imageView，并将Cell的imageView隐藏<br>3.将toVc的视图透明度设置为0，并隐藏toVc上的imageView<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">containerView?.addSubview(toVc.view)</span><br><span class=\"line\">containerView?.addSubview(snapImageView)</span><br><span class=\"line\"></span><br><span class=\"line\">snapImageView.frame = startFrame</span><br><span class=\"line\">cell.imgView.hidden = <span class=\"literal\">true</span></span><br><span class=\"line\">toVc.view.alpha = <span class=\"number\">0</span></span><br><span class=\"line\">toVc.imgView.hidden = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-动画设置\"><a href=\"#5-动画设置\" class=\"headerlink\" title=\"5.动画设置\"></a>5.动画设置</h5><p>在整个动画中只有2个流程<br>1.让toVc的视图逐渐显示出来<br>2.将snapImageView移动到终止frame<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    toVc.view.alpha = <span class=\"number\">1</span></span><br><span class=\"line\">    snapImageView.frame = finalFrame</span><br><span class=\"line\">    &#125;) &#123; (finished) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        toVc.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">        cell.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">        snapImageView.removeFromSuperview()</span><br><span class=\"line\">        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>动画结束之后，记得收场哦<br>1.移除snapImageView，并将toVc上的imageView显示出来<br>2.将cell上的imageView恢复显示<br>3.清除过场</p>\n<h4 id=\"3-设置push控制器\"><a href=\"#3-设置push控制器\" class=\"headerlink\" title=\"3.设置push控制器\"></a>3.设置push控制器</h4><p>老规矩，上述操作写好了剧本，得让演员上台表演了。由于这里是定制的过场动画，并不能重写导航去影响所有的过场，所以需要指定的演员<code>TTCustomFirstController</code><br>在TTCustomFirstController中，添加<code>UINavigationControllerDelegate</code>，显示控制器时添加代码，不显示时移除<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewWillAppear(animated)</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.navigationController?.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillDisappear</span><span class=\"params\">(animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewWillDisappear(animated)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"number\">_</span> = <span class=\"keyword\">self</span>.navigationController?.delegate &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.delegate = <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后声明此控制器的过场方式<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fromVC == <span class=\"keyword\">self</span> &amp;&amp; toVC <span class=\"keyword\">is</span> <span class=\"type\">TTCustomSecondController</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTCustomPushAnimation</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在导航的代理方法中，我们返回了自定义的过场动画接口，并对fromVc和toVc都做了类型判断，还记得我们在上面用到的<code>as!</code>强制类型转换么，这里的判断能保证类型的正确使用<br>重启程序，push的过场已经和预期的是一样的了 ☺️</p>\n<h4 id=\"4-设置pop动画\"><a href=\"#4-设置pop动画\" class=\"headerlink\" title=\"4.设置pop动画\"></a>4.设置pop动画</h4><p>push动画已经设置完毕，pop动画依旧是push的逆向过程</p>\n<h5 id=\"1-初始化pop过场动画\"><a href=\"#1-初始化pop过场动画\" class=\"headerlink\" title=\"1.初始化pop过场动画\"></a>1.初始化pop过场动画</h5><p>新建<code>TTCustomPopAnimation</code>，实现UIViewControllerAnimatedTransitioning的两个方法，这里直接贴出pop动画的设置代码<br><strong>依旧需要注意的是fromVc和toVc对应的控制器</strong><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> containerView = transitionContext.containerView()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomSecondController</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomFirstController</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectedCell = toVc.collection.cellForItemAtIndexPath(toVc.selectedIndex!) <span class=\"keyword\">as</span>! <span class=\"type\">TTThingCell</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> snapImgView = fromVc.imgView.snapshotViewAfterScreenUpdates(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startFrame = fromVc.view.convertRect(fromVc.imgView.frame, toView: containerView)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> finalFrame = selectedCell.imgView.convertRect(selectedCell.imgView.frame, toView: containerView)</span><br><span class=\"line\"></span><br><span class=\"line\">    snapImgView.frame = startFrame</span><br><span class=\"line\">    fromVc.imgView.hidden = <span class=\"literal\">true</span></span><br><span class=\"line\">    toVc.view.alpha = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    containerView?.insertSubview(toVc.view, belowSubview: fromVc.view)</span><br><span class=\"line\">    containerView?.addSubview(snapImgView)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        toVc.view.alpha = <span class=\"number\">1</span></span><br><span class=\"line\">        fromVc.view.alpha = <span class=\"number\">0</span></span><br><span class=\"line\">        snapImgView.frame = finalFrame</span><br><span class=\"line\">        &#125;) &#123; (finished) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            fromVc.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">            selectedCell.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">            snapImgView.removeFromSuperview()</span><br><span class=\"line\">            transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pop动画的设置还是有几个小坑的：<br>1.需要取得控制器跳转前点击的那个cell，这里采用了简化的方法，在cell点击时，将index记录在<code>selectedIndex</code>，方便pop的时候直接取用<br>2.注意各个视图透明度和hidden的控制</p>\n<h5 id=\"2-设置pop控制器\"><a href=\"#2-设置pop控制器\" class=\"headerlink\" title=\"2.设置pop控制器\"></a>2.设置pop控制器</h5><p>重复设置push控制器的流程，在<code>TTCustomSecondController</code>中，添加UINavigationControllerDelegate并实现导航代理方法<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fromVC.isEqual(<span class=\"keyword\">self</span>) &amp;&amp; toVC <span class=\"keyword\">is</span> <span class=\"type\">TTCustomFirstController</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTCustomPopAnimation</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次启动项目，pop的动画也能够正常工作了</p>\n<h4 id=\"5-手势返回\"><a href=\"#5-手势返回\" class=\"headerlink\" title=\"5.手势返回\"></a>5.手势返回</h4><p>跟之前一样，自定义过场之后，右划手势返回会失效，需要重新设置，这里就不重复这部分内容了，但是新的手势需要加到<code>TTCustomSecondController</code>控制器内，<a href=\"http://tsusolo.com/2016/02/01/custom_navigation_transition.html#6-__u53F3_u5212_u8FD4_u56DE_u624B_u52BF\">自定义手势</a></p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>来自于<a href=\"https://github.com/PeteC/InteractiveViewControllerTransitions\" target=\"_blank\" rel=\"noopener\">PeteC/InteractiveViewControllerTransitions</a>的定制过渡效果，这是个人非常喜欢的一种动画方式，习惯于成为<strong>元素重用</strong>，本章将要用Swift重写这个项目，掌握针对于页面的过渡动画，让自己的APP更具个性化。</p>\n<p><a href=\"https://github.com/TifaTsubasa/SwiftTransitionExample\" target=\"_blank\" rel=\"noopener\">源码见Github</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif\" alt=\"\"><br>","more":"<br>页面定制化的过渡方式同样依赖于<code>UIViewControllerAnimatedTransitioning</code>, 如果还不是很了解，可以复习一下<a href=\"http://tsusolo.com/2016/02/18/custom_navigation_transition.html\">自定义navigation controller过渡动画</a></p>\n<hr>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><ul>\n<li>整个过渡动画的核心在于图片的移动，看上去是将tableViewCell上的图片移动到下一页控制器的view上，实际上我们会拷贝一份imageView从cell的位置移动到视图中心</li>\n<li>动画的其他部分无非与设置各个view的透明度</li>\n</ul>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"1.初始化项目\"></a>1.初始化项目</h4><ul>\n<li>两层控制器</li>\n<li>相应的视图和模型</li>\n<li>push和pop动画接口</li>\n<li>资源文件，详见<a href=\"https://github.com/TifaTsubasa/SwiftTransitionExample\" target=\"_blank\" rel=\"noopener\">源码</a><br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-finder.png\" alt=\"\"></li>\n<li>控制器的初始化<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page1.png\" alt=\"\"><br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/custom-transition-page2.png\" alt=\"\"><br>初始化的过程比较重复，copy相应的代码就好<blockquote>\n<p>Swift Tip:<br>有一段初始化数据的代码比较有意思，可以感受一下<br>这里用到了<code>lazy</code>关键字进行懒加载，避免了oc里的判断。在赋值的右边，用到了一个匿名函数，并且紧接括号执行返回数组，比较类似于JavaScript的匿名立即执行函数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> things: [<span class=\"type\">TTThing</span>] = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []  <span class=\"comment\">// 通过字面量设置数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"2-设置过渡动画\"><a href=\"#2-设置过渡动画\" class=\"headerlink\" title=\"2.设置过渡动画\"></a>2.设置过渡动画</h4><p>上一章已经详细说明过渡动画的设置方式，这里就直接进入核心部分—-<strong>动画效果的处理</strong></p>\n<h5 id=\"1-过场时间设置\"><a href=\"#1-过场时间设置\" class=\"headerlink\" title=\"1.过场时间设置\"></a>1.过场时间设置</h5><p>依旧以push过场为例，在新建的<code>TTCustomPushAnimation.swift</code>文件内，首先实现<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">transitionDuration</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class=\"type\">NSTimeInterval</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置过场时间为1s，1秒的速度方便调试</p>\n<h5 id=\"2-view获取\"><a href=\"#2-view获取\" class=\"headerlink\" title=\"2.view获取\"></a>2.view获取</h5><p>然后来到动画大剧场<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>在<code>animateTransition</code>内中设置<br>取得动画所需view<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> containerView = transitionContext.containerView()</span><br><span class=\"line\"><span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomFromController</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomToController</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cell = fromVc.collection.cellForItemAtIndexPath((fromVc.collection.indexPathsForSelectedItems()?.first)!) <span class=\"keyword\">as</span>! <span class=\"type\">TTThingCell</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> snapImageView = cell.imgView.snapshotViewAfterScreenUpdates(<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></p>\n<p>除了过场必要的containerView、fromVc、toVc之外，我们还要通过collection取得点击的cell，并将这个cell上的ImageView拷贝成<code>snapImageView</code>备用</p>\n<blockquote>\n<p>Swift Tip:<br>这里在取得fromVc、toVc、cell时都用到了<code>as!</code>进行强制类型转换，加上感叹号避免在之后调用中的可选解析<br>，但是在逻辑上就需要保证相应类型的正确，后面的代码会做相应类型保护</p>\n</blockquote>\n<h5 id=\"3-过场参数设置\"><a href=\"#3-过场参数设置\" class=\"headerlink\" title=\"3.过场参数设置\"></a>3.过场参数设置</h5><p>除了必要的动画时间,还需要获得<code>snapImageView</code>在动画中的起始frame和终止frame(frame同时影响位置和大小)<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)</span><br><span class=\"line\"><span class=\"keyword\">let</span> startFrame = cell.imgView.superview!.convertRect(cell.imgView.frame, toView: containerView)</span><br><span class=\"line\"><span class=\"keyword\">let</span> finalFrame = toVc.view.convertRect(toVc.imgView.frame, toView: containerView)</span><br></pre></td></tr></table></figure></p>\n<p>记得动画舞台<code>containerView</code>么，<code>snapImageView</code>会在整个过场中置于其中进行动画操作，所以我们使用<code>convertRect</code>将Cell上imageView的frame转换到containerView作为起始frame，将toVc上imageView转换到containerView作为终止frame<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition_2/animation-demo.png\" alt=\"\"></p>\n<h5 id=\"4-动画初始化\"><a href=\"#4-动画初始化\" class=\"headerlink\" title=\"4.动画初始化\"></a>4.动画初始化</h5><p>获得所有动画所需的属性后，接下来就是动画的准备活动了<br>1.将toVc的视图和snapImageView添加到containerView上<br>2.将snapImageView的frame设置到起始frame，以覆盖Cell上的imageView，并将Cell的imageView隐藏<br>3.将toVc的视图透明度设置为0，并隐藏toVc上的imageView<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">containerView?.addSubview(toVc.view)</span><br><span class=\"line\">containerView?.addSubview(snapImageView)</span><br><span class=\"line\"></span><br><span class=\"line\">snapImageView.frame = startFrame</span><br><span class=\"line\">cell.imgView.hidden = <span class=\"literal\">true</span></span><br><span class=\"line\">toVc.view.alpha = <span class=\"number\">0</span></span><br><span class=\"line\">toVc.imgView.hidden = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-动画设置\"><a href=\"#5-动画设置\" class=\"headerlink\" title=\"5.动画设置\"></a>5.动画设置</h5><p>在整个动画中只有2个流程<br>1.让toVc的视图逐渐显示出来<br>2.将snapImageView移动到终止frame<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    toVc.view.alpha = <span class=\"number\">1</span></span><br><span class=\"line\">    snapImageView.frame = finalFrame</span><br><span class=\"line\">    &#125;) &#123; (finished) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        toVc.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">        cell.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">        snapImageView.removeFromSuperview()</span><br><span class=\"line\">        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>动画结束之后，记得收场哦<br>1.移除snapImageView，并将toVc上的imageView显示出来<br>2.将cell上的imageView恢复显示<br>3.清除过场</p>\n<h4 id=\"3-设置push控制器\"><a href=\"#3-设置push控制器\" class=\"headerlink\" title=\"3.设置push控制器\"></a>3.设置push控制器</h4><p>老规矩，上述操作写好了剧本，得让演员上台表演了。由于这里是定制的过场动画，并不能重写导航去影响所有的过场，所以需要指定的演员<code>TTCustomFirstController</code><br>在TTCustomFirstController中，添加<code>UINavigationControllerDelegate</code>，显示控制器时添加代码，不显示时移除<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewWillAppear(animated)</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.navigationController?.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillDisappear</span><span class=\"params\">(animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewWillDisappear(animated)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"number\">_</span> = <span class=\"keyword\">self</span>.navigationController?.delegate &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.delegate = <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后声明此控制器的过场方式<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fromVC == <span class=\"keyword\">self</span> &amp;&amp; toVC <span class=\"keyword\">is</span> <span class=\"type\">TTCustomSecondController</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTCustomPushAnimation</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在导航的代理方法中，我们返回了自定义的过场动画接口，并对fromVc和toVc都做了类型判断，还记得我们在上面用到的<code>as!</code>强制类型转换么，这里的判断能保证类型的正确使用<br>重启程序，push的过场已经和预期的是一样的了 ☺️</p>\n<h4 id=\"4-设置pop动画\"><a href=\"#4-设置pop动画\" class=\"headerlink\" title=\"4.设置pop动画\"></a>4.设置pop动画</h4><p>push动画已经设置完毕，pop动画依旧是push的逆向过程</p>\n<h5 id=\"1-初始化pop过场动画\"><a href=\"#1-初始化pop过场动画\" class=\"headerlink\" title=\"1.初始化pop过场动画\"></a>1.初始化pop过场动画</h5><p>新建<code>TTCustomPopAnimation</code>，实现UIViewControllerAnimatedTransitioning的两个方法，这里直接贴出pop动画的设置代码<br><strong>依旧需要注意的是fromVc和toVc对应的控制器</strong><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> containerView = transitionContext.containerView()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomSecondController</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>) <span class=\"keyword\">as</span>! <span class=\"type\">TTCustomFirstController</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectedCell = toVc.collection.cellForItemAtIndexPath(toVc.selectedIndex!) <span class=\"keyword\">as</span>! <span class=\"type\">TTThingCell</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> snapImgView = fromVc.imgView.snapshotViewAfterScreenUpdates(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startFrame = fromVc.view.convertRect(fromVc.imgView.frame, toView: containerView)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> finalFrame = selectedCell.imgView.convertRect(selectedCell.imgView.frame, toView: containerView)</span><br><span class=\"line\"></span><br><span class=\"line\">    snapImgView.frame = startFrame</span><br><span class=\"line\">    fromVc.imgView.hidden = <span class=\"literal\">true</span></span><br><span class=\"line\">    toVc.view.alpha = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    containerView?.insertSubview(toVc.view, belowSubview: fromVc.view)</span><br><span class=\"line\">    containerView?.addSubview(snapImgView)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        toVc.view.alpha = <span class=\"number\">1</span></span><br><span class=\"line\">        fromVc.view.alpha = <span class=\"number\">0</span></span><br><span class=\"line\">        snapImgView.frame = finalFrame</span><br><span class=\"line\">        &#125;) &#123; (finished) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            fromVc.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">            selectedCell.imgView.hidden = <span class=\"literal\">false</span></span><br><span class=\"line\">            snapImgView.removeFromSuperview()</span><br><span class=\"line\">            transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pop动画的设置还是有几个小坑的：<br>1.需要取得控制器跳转前点击的那个cell，这里采用了简化的方法，在cell点击时，将index记录在<code>selectedIndex</code>，方便pop的时候直接取用<br>2.注意各个视图透明度和hidden的控制</p>\n<h5 id=\"2-设置pop控制器\"><a href=\"#2-设置pop控制器\" class=\"headerlink\" title=\"2.设置pop控制器\"></a>2.设置pop控制器</h5><p>重复设置push控制器的流程，在<code>TTCustomSecondController</code>中，添加UINavigationControllerDelegate并实现导航代理方法<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fromVC.isEqual(<span class=\"keyword\">self</span>) &amp;&amp; toVC <span class=\"keyword\">is</span> <span class=\"type\">TTCustomFirstController</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTCustomPopAnimation</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次启动项目，pop的动画也能够正常工作了</p>\n<h4 id=\"5-手势返回\"><a href=\"#5-手势返回\" class=\"headerlink\" title=\"5.手势返回\"></a>5.手势返回</h4><p>跟之前一样，自定义过场之后，右划手势返回会失效，需要重新设置，这里就不重复这部分内容了，但是新的手势需要加到<code>TTCustomSecondController</code>控制器内，<a href=\"http://tsusolo.com/2016/02/01/custom_navigation_transition.html#6-__u53F3_u5212_u8FD4_u56DE_u624B_u52BF\">自定义手势</a></p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>"},{"layout":"design","title":"自定义navigation controller过渡动画","date":"2016-02-01T07:51:04.000Z","_content":"\n除了导航控制器自带的左右滑动的过渡动画，如何去自定义一个特殊的导航过渡效果呢\n[源码见Github](https://github.com/TifaTsubasa/SwiftTransitionExample)\n\n* 1.较流行的缩放过渡，不少APP都在采用这种方式，比如豌豆荚的一览，iOS9新加的APP之间的切换，这里推荐一下朋友的[LCNavigationController](https://github.com/LeoiOS/LCNavigationController)，想偷个懒的话可以尝试一下\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/transition1.gif)\n<!-- more -->\n* 2.元素重用的过渡方式\n我习惯将这种将view过渡到下一页的方式称\n为元素重用，这里的演示效果来自于[PeteC/InteractiveViewControllerTransitions](https://github.com/PeteC/InteractiveViewControllerTransitions)，[下一章](http://tsusolo.com/2016/02/18/custom_navigation_transition_2.html)会用swift重写这个项目\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif)\n\n### 设计思路\n缩放过渡的思路其实非常简单，在push/pop过程中，设置上一层控制器view的scale就营造出下沉的效果，重点是\n\n**如何控制导航过渡的过程**\n\n### 步骤\n#### 1.初始化控制器\n\n``` swift\nTTScaleNavigationController.swift // 继承UINavigationController用来重写导航的动画设置\nTTScaleFirstController.swift\t// 导航的前一页控制器\nTTScaleSecondController.swift\t// 导航的后一页控制器\n```\n首先需要初始化一个导航控制器和两个ViewController做基本的push/pop，当然，只有默认的左右滑动的效果😁\n\n#### 2.设置过渡动画\n**在什么地方控制转场的过程，如何修改转场动画呢?**\n\n这里就要用到iOS7新增的API，苹果提供的自定义转场动画的协议`UIViewControllerAnimatedTransitioning`，负责管理在转场切换过程发生的事件\n\n**以自定义push转场为例：**\n\n##### 1. 创建过场动画的接口类\n首先我们需要一个继承于`NSObject`，遵守`UIViewControllerAnimatedTransitioning`协议的类\n``` swift\nclass TTPushTransition: NSObject, UIViewControllerAnimatedTransitioning {\n\n}\n```\n\n##### 2. 设置过场时间\n在`TTPushTransition`中使用协议中的方法设置过场时间为1s(正常的过场时间大约为0.3s，1s用于测试)\n``` swift\nfunc transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {\n    return 1\n}\n```\n##### 3. 设置push过场动画\n首先我们需要理清一下过场动画的流程：\n\n* 我们将导航的前一页控制器称为fromVc，下一页控制称为toVc\n  在push过程中，TTScaleFirstController是fromVc，TTScaleSecondController是toVc\n  在pop过程中则反过来，TTScaleSecondController是fromVc，TTScaleFirstController是toVc\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniufrom&to.png)\n* 在导航push过程中，将fromVc视图的scale从1设置到0.7，将toVc视图的frame从屏幕右方移动到屏幕中间\n\n过场的动画，需要在`UIViewControllerAnimatedTransitioning`提供的\n\n``` swift\npublic func animateTransition(transitionContext: UIViewControllerContextTransitioning)\n```\n方法内实现，方法中的过场上下文`transitionContext`，会提供设置动画的所需的各个对象\n``` swift\n// 使用对应key取得相应控制器\nlet fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey)\nlet toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey)\n\nlet duration = self.transitionDuration(transitionContext)\t// 根据另一协议方法获得过场时间\nlet containerView = transitionContext.containerView()\t// 过场容器视图\n```\n过场上下文提供了一个容器视图`containerView`，在过场过程中，这个视图就相当一个舞台，fromVc和toVc的View可以在容器内做各种动画，首先我们需要准备一下舞台\n``` swift\ncontainerView?.addSubview(toVc!.view)\t// 默认fromVc的视图已经加入容器内\nlet screenW = UIScreen.mainScreen().bounds.width\nlet screenH = UIScreen.mainScreen().bounds.height\ntoVc?.view.frame = CGRectMake(screenW, 0, screenW, screenH)\n```\n设置好toVc的视图位置后，就开始正式的动画设置了\n``` swift\nUIView.animateWithDuration(duration, animations: { () -> Void in\n    fromVc?.view.transform = CGAffineTransformMakeScale(0.7, 0.7) // fromVc视图的scale设置到0.7\n    toVc?.view.frame = CGRectMake(0, 0, screenW, screenH)\t// toVc视图从屏幕右方移动到屏幕中间\n    }) { (_) -> Void in\n        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n\t}\n```\n需要注意的是，在动画结束时，必须调用`transitionContext.completeTransition(!transitionContext.transitionWasCancelled())`来清理舞台，如果传入一个`true`好像也没有问题，但是在加入右划返回手势，滑动一半取消时，就会出现问题，因此需要根据过场是否被取消来正确清理过场上下文\n##### 4. 更改导航的方式\n完成上面三步，我们就写好了过场的剧本，接下来就得请演员`TTScaleNavigationController`上台表演了\n``` swift\nimport UIKit\n\nclass TTScaleNavigationController: UINavigationController, UINavigationControllerDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.delegate = self\n    }\n\n    func navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        if (operation == .Push) {\n            return TTPushTransition()\n        }\n\t\treturn nil\n    }\n}\n```\n在UINavigationControllerDelegate的方法中，设置push状态的过场是写好的\"剧本\"，编译运行一次，push的动画已经像模像样了，不过好像只会生效一次o(╯□╰)o，需要完善pop的动画\n##### 5. 设置pop的动画\n设置pop动画的流程跟push类似，也需要新建一个遵守`UIViewControllerAnimatedTransitioning`的NSObject类，唯一不同的是设置动画，但实际上也就是push动画的逆向，这里就直接贴上代码了\n``` swift\nimport UIKit\n\nclass TTPopTransition: NSObject, UIViewControllerAnimatedTransitioning {\n    func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {\n        return 1\n    }\n\n    func animateTransition(transitionContext: UIViewControllerContextTransitioning) {\n        let containerView = transitionContext.containerView()\n        let fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey)\n        let toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey)\n\n        let duration = self.transitionDuration(transitionContext)\n        let screenW = UIScreen.mainScreen().bounds.width\n        let screenH = UIScreen.mainScreen().bounds.height\n\n        containerView?.addSubview(toVc!.view)\n        containerView?.sendSubviewToBack(toVc!.view)\n        UIView.animateWithDuration(duration, animations: { () -> Void in\n            fromVc?.view.frame = CGRectMake(screenW, 0, screenW, screenH)\n            toVc?.view.transform = CGAffineTransformMakeScale(1, 1)\n            }) { (_) -> Void in\n                transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n        }\n    }\n}\n```\n\n然后完善一下`TTScaleNavigationController`的协议方法，补充pop状态需要的过场\n``` swift\nfunc navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n    if (operation == .Push) {\n        return TTPushTransition()\n    } else if operation == .Pop {\n        return TTPopTransition()\n    }\n    return nil\n}\n```\n再次运行项目，导航的过场已经基本完善了，已经拥有了想象动画，但是！！！\n\n##### 6. 右划返回手势\n重写了导航控制器之后，右划手势就失效了，需要手动添加手势😔\n\n回到`TTScaleNavigationController`中，手势需要一个新的对象来记录手势状态，并且这个对象最终会通知导航进行相应操作，添加\n``` swift\nvar interactivePopTransition: UIPercentDrivenInteractiveTransition?\n```\n然后在`viewDidLoad`方法中添加边缘手势\n``` swift\nlet popRecognizer = UIScreenEdgePanGestureRecognizer(target: self, action: \"handlePopRecognizer:\")\npopRecognizer.edges = .Left;\nself.view.addGestureRecognizer(popRecognizer)\n```\n记得补充手势的响应方法，这里使用了Swift的`switch`特性来判断状态并记录状态\n``` swift\nfunc handlePopRecognizer(recognizer: UIScreenEdgePanGestureRecognizer) {\n    // 获取手势在屏幕横屏范围的滑动百分比，并控制在0.0 - 1.0之间\n    var progress = recognizer.translationInView(self.view).x / self.view.bounds.width\n    progress = min(1.0, max(0.0, progress))\n\n    switch recognizer.state {\n    case .Began:    // 开始滑动：初始化UIPercentDrivenInteractiveTransition对象，并开启导航pop\n        interactivePopTransition = UIPercentDrivenInteractiveTransition()\n        self.popViewControllerAnimated(true)\n    case .Changed:  // 滑动过程中，根据在屏幕上滑动的百分比更新状态\n        interactivePopTransition?.updateInteractiveTransition(progress)\n    case .Ended, .Cancelled:    // 滑动结束或取消时，判断手指位置，在左半屏幕取消pop，在右半屏幕完成pop过程\n        if progress > 0.5 {\n            interactivePopTransition?.finishInteractiveTransition()\n        } else {\n            interactivePopTransition?.cancelInteractiveTransition()\n        }\n        interactivePopTransition = nil\n    default: break\n    }\n}\n```\n最后，还要把我们记录下来的`UIPercentDrivenInteractiveTransition`对象通知给导航控制器\n``` swift\nfunc navigationController(navigationController: UINavigationController, interactionControllerForAnimationController animationController: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning? {\n    return interactivePopTransition\n}\n```\n终于，一个自定义过场方式的导航控制器就完活儿了😉\n\n### 优化\n##### 1. 添加阴影\n为toVc的视图添加左侧的阴影，提高两个视图的层次感\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/shadow.jpeg)\n在`TTPushTransition`的动画设置方法中，添加\n``` swift\n// shadows\ntoVc?.view.layer.shadowOffset = CGSizeMake(-3, 0);\ntoVc?.view.layer.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.3).CGColor\ntoVc?.view.layer.shadowOpacity = 1\n```\n\n##### 2. 渐亮渐暗效果\n为fromVc提供push渐暗，pop渐亮的效果\n\n思路是在fromVc和toVc的视图中间，插入一层黑色的view，并调节这一view的透明度，在`TTPushTransition`的动画设置方法中，在动画开始前插入蒙版视图\n``` swift\nlet blackView = UIView(frame: CGRectMake(0, 0, screenW, screenH))\nblackView.backgroundColor = UIColor.blackColor()\nblackView.alpha = 0\ncontainerView?.insertSubview(blackView, belowSubview: toVc!.view)\n```\n在动画中，设置`blackView.alpha = 0.7`并在动画结束时`blackView.removeFromSuperview()`\npop过程自然就是一个相反的过程了，同样插入一个蒙版透明度从0.7到0\n\n##### 3. 优化参数\n记得修改动画时间到0.3，fromVc视图的scale为0.95 😜\n\n---\n\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n\n\n","source":"_posts/自定义navigation controller过渡动画.md","raw":"layout: design\ntitle: 自定义navigation controller过渡动画\ndate: 2016-02-01 15:51:04\ncategories: Swift过渡指南\npermalink: custom_navigation_transition\n---\n\n除了导航控制器自带的左右滑动的过渡动画，如何去自定义一个特殊的导航过渡效果呢\n[源码见Github](https://github.com/TifaTsubasa/SwiftTransitionExample)\n\n* 1.较流行的缩放过渡，不少APP都在采用这种方式，比如豌豆荚的一览，iOS9新加的APP之间的切换，这里推荐一下朋友的[LCNavigationController](https://github.com/LeoiOS/LCNavigationController)，想偷个懒的话可以尝试一下\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/transition1.gif)\n<!-- more -->\n* 2.元素重用的过渡方式\n我习惯将这种将view过渡到下一页的方式称\n为元素重用，这里的演示效果来自于[PeteC/InteractiveViewControllerTransitions](https://github.com/PeteC/InteractiveViewControllerTransitions)，[下一章](http://tsusolo.com/2016/02/18/custom_navigation_transition_2.html)会用swift重写这个项目\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif)\n\n### 设计思路\n缩放过渡的思路其实非常简单，在push/pop过程中，设置上一层控制器view的scale就营造出下沉的效果，重点是\n\n**如何控制导航过渡的过程**\n\n### 步骤\n#### 1.初始化控制器\n\n``` swift\nTTScaleNavigationController.swift // 继承UINavigationController用来重写导航的动画设置\nTTScaleFirstController.swift\t// 导航的前一页控制器\nTTScaleSecondController.swift\t// 导航的后一页控制器\n```\n首先需要初始化一个导航控制器和两个ViewController做基本的push/pop，当然，只有默认的左右滑动的效果😁\n\n#### 2.设置过渡动画\n**在什么地方控制转场的过程，如何修改转场动画呢?**\n\n这里就要用到iOS7新增的API，苹果提供的自定义转场动画的协议`UIViewControllerAnimatedTransitioning`，负责管理在转场切换过程发生的事件\n\n**以自定义push转场为例：**\n\n##### 1. 创建过场动画的接口类\n首先我们需要一个继承于`NSObject`，遵守`UIViewControllerAnimatedTransitioning`协议的类\n``` swift\nclass TTPushTransition: NSObject, UIViewControllerAnimatedTransitioning {\n\n}\n```\n\n##### 2. 设置过场时间\n在`TTPushTransition`中使用协议中的方法设置过场时间为1s(正常的过场时间大约为0.3s，1s用于测试)\n``` swift\nfunc transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {\n    return 1\n}\n```\n##### 3. 设置push过场动画\n首先我们需要理清一下过场动画的流程：\n\n* 我们将导航的前一页控制器称为fromVc，下一页控制称为toVc\n  在push过程中，TTScaleFirstController是fromVc，TTScaleSecondController是toVc\n  在pop过程中则反过来，TTScaleSecondController是fromVc，TTScaleFirstController是toVc\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniufrom&to.png)\n* 在导航push过程中，将fromVc视图的scale从1设置到0.7，将toVc视图的frame从屏幕右方移动到屏幕中间\n\n过场的动画，需要在`UIViewControllerAnimatedTransitioning`提供的\n\n``` swift\npublic func animateTransition(transitionContext: UIViewControllerContextTransitioning)\n```\n方法内实现，方法中的过场上下文`transitionContext`，会提供设置动画的所需的各个对象\n``` swift\n// 使用对应key取得相应控制器\nlet fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey)\nlet toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey)\n\nlet duration = self.transitionDuration(transitionContext)\t// 根据另一协议方法获得过场时间\nlet containerView = transitionContext.containerView()\t// 过场容器视图\n```\n过场上下文提供了一个容器视图`containerView`，在过场过程中，这个视图就相当一个舞台，fromVc和toVc的View可以在容器内做各种动画，首先我们需要准备一下舞台\n``` swift\ncontainerView?.addSubview(toVc!.view)\t// 默认fromVc的视图已经加入容器内\nlet screenW = UIScreen.mainScreen().bounds.width\nlet screenH = UIScreen.mainScreen().bounds.height\ntoVc?.view.frame = CGRectMake(screenW, 0, screenW, screenH)\n```\n设置好toVc的视图位置后，就开始正式的动画设置了\n``` swift\nUIView.animateWithDuration(duration, animations: { () -> Void in\n    fromVc?.view.transform = CGAffineTransformMakeScale(0.7, 0.7) // fromVc视图的scale设置到0.7\n    toVc?.view.frame = CGRectMake(0, 0, screenW, screenH)\t// toVc视图从屏幕右方移动到屏幕中间\n    }) { (_) -> Void in\n        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n\t}\n```\n需要注意的是，在动画结束时，必须调用`transitionContext.completeTransition(!transitionContext.transitionWasCancelled())`来清理舞台，如果传入一个`true`好像也没有问题，但是在加入右划返回手势，滑动一半取消时，就会出现问题，因此需要根据过场是否被取消来正确清理过场上下文\n##### 4. 更改导航的方式\n完成上面三步，我们就写好了过场的剧本，接下来就得请演员`TTScaleNavigationController`上台表演了\n``` swift\nimport UIKit\n\nclass TTScaleNavigationController: UINavigationController, UINavigationControllerDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.delegate = self\n    }\n\n    func navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        if (operation == .Push) {\n            return TTPushTransition()\n        }\n\t\treturn nil\n    }\n}\n```\n在UINavigationControllerDelegate的方法中，设置push状态的过场是写好的\"剧本\"，编译运行一次，push的动画已经像模像样了，不过好像只会生效一次o(╯□╰)o，需要完善pop的动画\n##### 5. 设置pop的动画\n设置pop动画的流程跟push类似，也需要新建一个遵守`UIViewControllerAnimatedTransitioning`的NSObject类，唯一不同的是设置动画，但实际上也就是push动画的逆向，这里就直接贴上代码了\n``` swift\nimport UIKit\n\nclass TTPopTransition: NSObject, UIViewControllerAnimatedTransitioning {\n    func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -> NSTimeInterval {\n        return 1\n    }\n\n    func animateTransition(transitionContext: UIViewControllerContextTransitioning) {\n        let containerView = transitionContext.containerView()\n        let fromVc = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey)\n        let toVc = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey)\n\n        let duration = self.transitionDuration(transitionContext)\n        let screenW = UIScreen.mainScreen().bounds.width\n        let screenH = UIScreen.mainScreen().bounds.height\n\n        containerView?.addSubview(toVc!.view)\n        containerView?.sendSubviewToBack(toVc!.view)\n        UIView.animateWithDuration(duration, animations: { () -> Void in\n            fromVc?.view.frame = CGRectMake(screenW, 0, screenW, screenH)\n            toVc?.view.transform = CGAffineTransformMakeScale(1, 1)\n            }) { (_) -> Void in\n                transitionContext.completeTransition(!transitionContext.transitionWasCancelled())\n        }\n    }\n}\n```\n\n然后完善一下`TTScaleNavigationController`的协议方法，补充pop状态需要的过场\n``` swift\nfunc navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n    if (operation == .Push) {\n        return TTPushTransition()\n    } else if operation == .Pop {\n        return TTPopTransition()\n    }\n    return nil\n}\n```\n再次运行项目，导航的过场已经基本完善了，已经拥有了想象动画，但是！！！\n\n##### 6. 右划返回手势\n重写了导航控制器之后，右划手势就失效了，需要手动添加手势😔\n\n回到`TTScaleNavigationController`中，手势需要一个新的对象来记录手势状态，并且这个对象最终会通知导航进行相应操作，添加\n``` swift\nvar interactivePopTransition: UIPercentDrivenInteractiveTransition?\n```\n然后在`viewDidLoad`方法中添加边缘手势\n``` swift\nlet popRecognizer = UIScreenEdgePanGestureRecognizer(target: self, action: \"handlePopRecognizer:\")\npopRecognizer.edges = .Left;\nself.view.addGestureRecognizer(popRecognizer)\n```\n记得补充手势的响应方法，这里使用了Swift的`switch`特性来判断状态并记录状态\n``` swift\nfunc handlePopRecognizer(recognizer: UIScreenEdgePanGestureRecognizer) {\n    // 获取手势在屏幕横屏范围的滑动百分比，并控制在0.0 - 1.0之间\n    var progress = recognizer.translationInView(self.view).x / self.view.bounds.width\n    progress = min(1.0, max(0.0, progress))\n\n    switch recognizer.state {\n    case .Began:    // 开始滑动：初始化UIPercentDrivenInteractiveTransition对象，并开启导航pop\n        interactivePopTransition = UIPercentDrivenInteractiveTransition()\n        self.popViewControllerAnimated(true)\n    case .Changed:  // 滑动过程中，根据在屏幕上滑动的百分比更新状态\n        interactivePopTransition?.updateInteractiveTransition(progress)\n    case .Ended, .Cancelled:    // 滑动结束或取消时，判断手指位置，在左半屏幕取消pop，在右半屏幕完成pop过程\n        if progress > 0.5 {\n            interactivePopTransition?.finishInteractiveTransition()\n        } else {\n            interactivePopTransition?.cancelInteractiveTransition()\n        }\n        interactivePopTransition = nil\n    default: break\n    }\n}\n```\n最后，还要把我们记录下来的`UIPercentDrivenInteractiveTransition`对象通知给导航控制器\n``` swift\nfunc navigationController(navigationController: UINavigationController, interactionControllerForAnimationController animationController: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning? {\n    return interactivePopTransition\n}\n```\n终于，一个自定义过场方式的导航控制器就完活儿了😉\n\n### 优化\n##### 1. 添加阴影\n为toVc的视图添加左侧的阴影，提高两个视图的层次感\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/shadow.jpeg)\n在`TTPushTransition`的动画设置方法中，添加\n``` swift\n// shadows\ntoVc?.view.layer.shadowOffset = CGSizeMake(-3, 0);\ntoVc?.view.layer.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.3).CGColor\ntoVc?.view.layer.shadowOpacity = 1\n```\n\n##### 2. 渐亮渐暗效果\n为fromVc提供push渐暗，pop渐亮的效果\n\n思路是在fromVc和toVc的视图中间，插入一层黑色的view，并调节这一view的透明度，在`TTPushTransition`的动画设置方法中，在动画开始前插入蒙版视图\n``` swift\nlet blackView = UIView(frame: CGRectMake(0, 0, screenW, screenH))\nblackView.backgroundColor = UIColor.blackColor()\nblackView.alpha = 0\ncontainerView?.insertSubview(blackView, belowSubview: toVc!.view)\n```\n在动画中，设置`blackView.alpha = 0.7`并在动画结束时`blackView.removeFromSuperview()`\npop过程自然就是一个相反的过程了，同样插入一个蒙版透明度从0.7到0\n\n##### 3. 优化参数\n记得修改动画时间到0.3，fromVc视图的scale为0.95 😜\n\n---\n\n**如果你也喜爱游戏，欢迎支持我的APP**  [Up 游戏专辑](https://itunes.apple.com/app/id986716705)\n\n![](https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png)\n\n\n","slug":"custom_navigation_transition","published":1,"updated":"2017-11-30T09:41:48.000Z","comments":1,"photos":[],"link":"","_id":"cjannazac000a1rnr2onlpjtc","content":"<p>除了导航控制器自带的左右滑动的过渡动画，如何去自定义一个特殊的导航过渡效果呢<br><a href=\"https://github.com/TifaTsubasa/SwiftTransitionExample\" target=\"_blank\" rel=\"noopener\">源码见Github</a></p>\n<ul>\n<li>1.较流行的缩放过渡，不少APP都在采用这种方式，比如豌豆荚的一览，iOS9新加的APP之间的切换，这里推荐一下朋友的<a href=\"https://github.com/LeoiOS/LCNavigationController\" target=\"_blank\" rel=\"noopener\">LCNavigationController</a>，想偷个懒的话可以尝试一下</li>\n</ul>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/transition1.gif\" alt=\"\"><br><a id=\"more\"></a></p>\n<ul>\n<li>2.元素重用的过渡方式<br>我习惯将这种将view过渡到下一页的方式称<br>为元素重用，这里的演示效果来自于<a href=\"https://github.com/PeteC/InteractiveViewControllerTransitions\" target=\"_blank\" rel=\"noopener\">PeteC/InteractiveViewControllerTransitions</a>，<a href=\"http://tsusolo.com/2016/02/18/custom_navigation_transition_2.html\">下一章</a>会用swift重写这个项目</li>\n</ul>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif\" alt=\"\"></p>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>缩放过渡的思路其实非常简单，在push/pop过程中，设置上一层控制器view的scale就营造出下沉的效果，重点是</p>\n<p><strong>如何控制导航过渡的过程</strong></p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><h4 id=\"1-初始化控制器\"><a href=\"#1-初始化控制器\" class=\"headerlink\" title=\"1.初始化控制器\"></a>1.初始化控制器</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TTScaleNavigationController</span>.swift <span class=\"comment\">// 继承UINavigationController用来重写导航的动画设置</span></span><br><span class=\"line\"><span class=\"type\">TTScaleFirstController</span>.swift\t<span class=\"comment\">// 导航的前一页控制器</span></span><br><span class=\"line\"><span class=\"type\">TTScaleSecondController</span>.swift\t<span class=\"comment\">// 导航的后一页控制器</span></span><br></pre></td></tr></table></figure>\n<p>首先需要初始化一个导航控制器和两个ViewController做基本的push/pop，当然，只有默认的左右滑动的效果😁</p>\n<h4 id=\"2-设置过渡动画\"><a href=\"#2-设置过渡动画\" class=\"headerlink\" title=\"2.设置过渡动画\"></a>2.设置过渡动画</h4><p><strong>在什么地方控制转场的过程，如何修改转场动画呢?</strong></p>\n<p>这里就要用到iOS7新增的API，苹果提供的自定义转场动画的协议<code>UIViewControllerAnimatedTransitioning</code>，负责管理在转场切换过程发生的事件</p>\n<p><strong>以自定义push转场为例：</strong></p>\n<h5 id=\"1-创建过场动画的接口类\"><a href=\"#1-创建过场动画的接口类\" class=\"headerlink\" title=\"1. 创建过场动画的接口类\"></a>1. 创建过场动画的接口类</h5><p>首先我们需要一个继承于<code>NSObject</code>，遵守<code>UIViewControllerAnimatedTransitioning</code>协议的类<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTPushTransition</span>: <span class=\"title\">NSObject</span>, <span class=\"title\">UIViewControllerAnimatedTransitioning</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-设置过场时间\"><a href=\"#2-设置过场时间\" class=\"headerlink\" title=\"2. 设置过场时间\"></a>2. 设置过场时间</h5><p>在<code>TTPushTransition</code>中使用协议中的方法设置过场时间为1s(正常的过场时间大约为0.3s，1s用于测试)<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">transitionDuration</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class=\"type\">NSTimeInterval</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-设置push过场动画\"><a href=\"#3-设置push过场动画\" class=\"headerlink\" title=\"3. 设置push过场动画\"></a>3. 设置push过场动画</h5><p>首先我们需要理清一下过场动画的流程：</p>\n<ul>\n<li>我们将导航的前一页控制器称为fromVc，下一页控制称为toVc<br>在push过程中，TTScaleFirstController是fromVc，TTScaleSecondController是toVc<br>在pop过程中则反过来，TTScaleSecondController是fromVc，TTScaleFirstController是toVc<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniufrom&amp;to.png\" alt=\"\"></li>\n<li>在导航push过程中，将fromVc视图的scale从1设置到0.7，将toVc视图的frame从屏幕右方移动到屏幕中间</li>\n</ul>\n<p>过场的动画，需要在<code>UIViewControllerAnimatedTransitioning</code>提供的</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span></span><br></pre></td></tr></table></figure>\n<p>方法内实现，方法中的过场上下文<code>transitionContext</code>，会提供设置动画的所需的各个对象<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对应key取得相应控制器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)\t<span class=\"comment\">// 根据另一协议方法获得过场时间</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> containerView = transitionContext.containerView()\t<span class=\"comment\">// 过场容器视图</span></span><br></pre></td></tr></table></figure></p>\n<p>过场上下文提供了一个容器视图<code>containerView</code>，在过场过程中，这个视图就相当一个舞台，fromVc和toVc的View可以在容器内做各种动画，首先我们需要准备一下舞台<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">containerView?.addSubview(toVc!.view)\t<span class=\"comment\">// 默认fromVc的视图已经加入容器内</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> screenW = <span class=\"type\">UIScreen</span>.mainScreen().bounds.width</span><br><span class=\"line\"><span class=\"keyword\">let</span> screenH = <span class=\"type\">UIScreen</span>.mainScreen().bounds.height</span><br><span class=\"line\">toVc?.view.frame = <span class=\"type\">CGRectMake</span>(screenW, <span class=\"number\">0</span>, screenW, screenH)</span><br></pre></td></tr></table></figure></p>\n<p>设置好toVc的视图位置后，就开始正式的动画设置了<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    fromVc?.view.transform = <span class=\"type\">CGAffineTransformMakeScale</span>(<span class=\"number\">0.7</span>, <span class=\"number\">0.7</span>) <span class=\"comment\">// fromVc视图的scale设置到0.7</span></span><br><span class=\"line\">    toVc?.view.frame = <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, screenW, screenH)\t<span class=\"comment\">// toVc视图从屏幕右方移动到屏幕中间</span></span><br><span class=\"line\">    &#125;) &#123; (<span class=\"number\">_</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，在动画结束时，必须调用<code>transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</code>来清理舞台，如果传入一个<code>true</code>好像也没有问题，但是在加入右划返回手势，滑动一半取消时，就会出现问题，因此需要根据过场是否被取消来正确清理过场上下文</p>\n<h5 id=\"4-更改导航的方式\"><a href=\"#4-更改导航的方式\" class=\"headerlink\" title=\"4. 更改导航的方式\"></a>4. 更改导航的方式</h5><p>完成上面三步，我们就写好了过场的剧本，接下来就得请演员<code>TTScaleNavigationController</code>上台表演了<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTScaleNavigationController</span>: <span class=\"title\">UINavigationController</span>, <span class=\"title\">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (operation == .<span class=\"type\">Push</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">TTPushTransition</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在UINavigationControllerDelegate的方法中，设置push状态的过场是写好的”剧本”，编译运行一次，push的动画已经像模像样了，不过好像只会生效一次o(╯□╰)o，需要完善pop的动画</p>\n<h5 id=\"5-设置pop的动画\"><a href=\"#5-设置pop的动画\" class=\"headerlink\" title=\"5. 设置pop的动画\"></a>5. 设置pop的动画</h5><p>设置pop动画的流程跟push类似，也需要新建一个遵守<code>UIViewControllerAnimatedTransitioning</code>的NSObject类，唯一不同的是设置动画，但实际上也就是push动画的逆向，这里就直接贴上代码了<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTPopTransition</span>: <span class=\"title\">NSObject</span>, <span class=\"title\">UIViewControllerAnimatedTransitioning</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">transitionDuration</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class=\"type\">NSTimeInterval</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> containerView = transitionContext.containerView()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> screenW = <span class=\"type\">UIScreen</span>.mainScreen().bounds.width</span><br><span class=\"line\">        <span class=\"keyword\">let</span> screenH = <span class=\"type\">UIScreen</span>.mainScreen().bounds.height</span><br><span class=\"line\"></span><br><span class=\"line\">        containerView?.addSubview(toVc!.view)</span><br><span class=\"line\">        containerView?.sendSubviewToBack(toVc!.view)</span><br><span class=\"line\">        <span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            fromVc?.view.frame = <span class=\"type\">CGRectMake</span>(screenW, <span class=\"number\">0</span>, screenW, screenH)</span><br><span class=\"line\">            toVc?.view.transform = <span class=\"type\">CGAffineTransformMakeScale</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;) &#123; (<span class=\"number\">_</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后完善一下<code>TTScaleNavigationController</code>的协议方法，补充pop状态需要的过场<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (operation == .<span class=\"type\">Push</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTPushTransition</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> operation == .<span class=\"type\">Pop</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTPopTransition</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次运行项目，导航的过场已经基本完善了，已经拥有了想象动画，但是！！！</p>\n<h5 id=\"6-右划返回手势\"><a href=\"#6-右划返回手势\" class=\"headerlink\" title=\"6. 右划返回手势\"></a>6. 右划返回手势</h5><p>重写了导航控制器之后，右划手势就失效了，需要手动添加手势😔</p>\n<p>回到<code>TTScaleNavigationController</code>中，手势需要一个新的对象来记录手势状态，并且这个对象最终会通知导航进行相应操作，添加<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> interactivePopTransition: <span class=\"type\">UIPercentDrivenInteractiveTransition</span>?</span><br></pre></td></tr></table></figure></p>\n<p>然后在<code>viewDidLoad</code>方法中添加边缘手势<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> popRecognizer = <span class=\"type\">UIScreenEdgePanGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: <span class=\"string\">\"handlePopRecognizer:\"</span>)</span><br><span class=\"line\">popRecognizer.edges = .<span class=\"type\">Left</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addGestureRecognizer(popRecognizer)</span><br></pre></td></tr></table></figure></p>\n<p>记得补充手势的响应方法，这里使用了Swift的<code>switch</code>特性来判断状态并记录状态<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handlePopRecognizer</span><span class=\"params\">(recognizer: UIScreenEdgePanGestureRecognizer)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取手势在屏幕横屏范围的滑动百分比，并控制在0.0 - 1.0之间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> progress = recognizer.translationInView(<span class=\"keyword\">self</span>.view).x / <span class=\"keyword\">self</span>.view.bounds.width</span><br><span class=\"line\">    progress = <span class=\"built_in\">min</span>(<span class=\"number\">1.0</span>, <span class=\"built_in\">max</span>(<span class=\"number\">0.0</span>, progress))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> recognizer.state &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Began</span>:    <span class=\"comment\">// 开始滑动：初始化UIPercentDrivenInteractiveTransition对象，并开启导航pop</span></span><br><span class=\"line\">        interactivePopTransition = <span class=\"type\">UIPercentDrivenInteractiveTransition</span>()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.popViewControllerAnimated(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Changed</span>:  <span class=\"comment\">// 滑动过程中，根据在屏幕上滑动的百分比更新状态</span></span><br><span class=\"line\">        interactivePopTransition?.updateInteractiveTransition(progress)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Ended</span>, .<span class=\"type\">Cancelled</span>:    <span class=\"comment\">// 滑动结束或取消时，判断手指位置，在左半屏幕取消pop，在右半屏幕完成pop过程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> progress &gt; <span class=\"number\">0.5</span> &#123;</span><br><span class=\"line\">            interactivePopTransition?.finishInteractiveTransition()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            interactivePopTransition?.cancelInteractiveTransition()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        interactivePopTransition = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，还要把我们记录下来的<code>UIPercentDrivenInteractiveTransition</code>对象通知给导航控制器<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, interactionControllerForAnimationController animationController: UIViewControllerAnimatedTransitioning)</span></span> -&gt; <span class=\"type\">UIViewControllerInteractiveTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> interactivePopTransition</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>终于，一个自定义过场方式的导航控制器就完活儿了😉</p>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><h5 id=\"1-添加阴影\"><a href=\"#1-添加阴影\" class=\"headerlink\" title=\"1. 添加阴影\"></a>1. 添加阴影</h5><p>为toVc的视图添加左侧的阴影，提高两个视图的层次感<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/shadow.jpeg\" alt=\"\"><br>在<code>TTPushTransition</code>的动画设置方法中，添加<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shadows</span></span><br><span class=\"line\">toVc?.view.layer.shadowOffset = <span class=\"type\">CGSizeMake</span>(-<span class=\"number\">3</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">toVc?.view.layer.shadowColor = <span class=\"type\">UIColor</span>.blackColor().colorWithAlphaComponent(<span class=\"number\">0.3</span>).<span class=\"type\">CGColor</span></span><br><span class=\"line\">toVc?.view.layer.shadowOpacity = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-渐亮渐暗效果\"><a href=\"#2-渐亮渐暗效果\" class=\"headerlink\" title=\"2. 渐亮渐暗效果\"></a>2. 渐亮渐暗效果</h5><p>为fromVc提供push渐暗，pop渐亮的效果</p>\n<p>思路是在fromVc和toVc的视图中间，插入一层黑色的view，并调节这一view的透明度，在<code>TTPushTransition</code>的动画设置方法中，在动画开始前插入蒙版视图<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> blackView = <span class=\"type\">UIView</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, screenW, screenH))</span><br><span class=\"line\">blackView.backgroundColor = <span class=\"type\">UIColor</span>.blackColor()</span><br><span class=\"line\">blackView.alpha = <span class=\"number\">0</span></span><br><span class=\"line\">containerView?.insertSubview(blackView, belowSubview: toVc!.view)</span><br></pre></td></tr></table></figure></p>\n<p>在动画中，设置<code>blackView.alpha = 0.7</code>并在动画结束时<code>blackView.removeFromSuperview()</code><br>pop过程自然就是一个相反的过程了，同样插入一个蒙版透明度从0.7到0</p>\n<h5 id=\"3-优化参数\"><a href=\"#3-优化参数\" class=\"headerlink\" title=\"3. 优化参数\"></a>3. 优化参数</h5><p>记得修改动画时间到0.3，fromVc视图的scale为0.95 😜</p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>除了导航控制器自带的左右滑动的过渡动画，如何去自定义一个特殊的导航过渡效果呢<br><a href=\"https://github.com/TifaTsubasa/SwiftTransitionExample\" target=\"_blank\" rel=\"noopener\">源码见Github</a></p>\n<ul>\n<li>1.较流行的缩放过渡，不少APP都在采用这种方式，比如豌豆荚的一览，iOS9新加的APP之间的切换，这里推荐一下朋友的<a href=\"https://github.com/LeoiOS/LCNavigationController\" target=\"_blank\" rel=\"noopener\">LCNavigationController</a>，想偷个懒的话可以尝试一下</li>\n</ul>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/transition1.gif\" alt=\"\"><br>","more":"</p>\n<ul>\n<li>2.元素重用的过渡方式<br>我习惯将这种将view过渡到下一页的方式称<br>为元素重用，这里的演示效果来自于<a href=\"https://github.com/PeteC/InteractiveViewControllerTransitions\" target=\"_blank\" rel=\"noopener\">PeteC/InteractiveViewControllerTransitions</a>，<a href=\"http://tsusolo.com/2016/02/18/custom_navigation_transition_2.html\">下一章</a>会用swift重写这个项目</li>\n</ul>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniutransition2.gif\" alt=\"\"></p>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><p>缩放过渡的思路其实非常简单，在push/pop过程中，设置上一层控制器view的scale就营造出下沉的效果，重点是</p>\n<p><strong>如何控制导航过渡的过程</strong></p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><h4 id=\"1-初始化控制器\"><a href=\"#1-初始化控制器\" class=\"headerlink\" title=\"1.初始化控制器\"></a>1.初始化控制器</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TTScaleNavigationController</span>.swift <span class=\"comment\">// 继承UINavigationController用来重写导航的动画设置</span></span><br><span class=\"line\"><span class=\"type\">TTScaleFirstController</span>.swift\t<span class=\"comment\">// 导航的前一页控制器</span></span><br><span class=\"line\"><span class=\"type\">TTScaleSecondController</span>.swift\t<span class=\"comment\">// 导航的后一页控制器</span></span><br></pre></td></tr></table></figure>\n<p>首先需要初始化一个导航控制器和两个ViewController做基本的push/pop，当然，只有默认的左右滑动的效果😁</p>\n<h4 id=\"2-设置过渡动画\"><a href=\"#2-设置过渡动画\" class=\"headerlink\" title=\"2.设置过渡动画\"></a>2.设置过渡动画</h4><p><strong>在什么地方控制转场的过程，如何修改转场动画呢?</strong></p>\n<p>这里就要用到iOS7新增的API，苹果提供的自定义转场动画的协议<code>UIViewControllerAnimatedTransitioning</code>，负责管理在转场切换过程发生的事件</p>\n<p><strong>以自定义push转场为例：</strong></p>\n<h5 id=\"1-创建过场动画的接口类\"><a href=\"#1-创建过场动画的接口类\" class=\"headerlink\" title=\"1. 创建过场动画的接口类\"></a>1. 创建过场动画的接口类</h5><p>首先我们需要一个继承于<code>NSObject</code>，遵守<code>UIViewControllerAnimatedTransitioning</code>协议的类<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTPushTransition</span>: <span class=\"title\">NSObject</span>, <span class=\"title\">UIViewControllerAnimatedTransitioning</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-设置过场时间\"><a href=\"#2-设置过场时间\" class=\"headerlink\" title=\"2. 设置过场时间\"></a>2. 设置过场时间</h5><p>在<code>TTPushTransition</code>中使用协议中的方法设置过场时间为1s(正常的过场时间大约为0.3s，1s用于测试)<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">transitionDuration</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class=\"type\">NSTimeInterval</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-设置push过场动画\"><a href=\"#3-设置push过场动画\" class=\"headerlink\" title=\"3. 设置push过场动画\"></a>3. 设置push过场动画</h5><p>首先我们需要理清一下过场动画的流程：</p>\n<ul>\n<li>我们将导航的前一页控制器称为fromVc，下一页控制称为toVc<br>在push过程中，TTScaleFirstController是fromVc，TTScaleSecondController是toVc<br>在pop过程中则反过来，TTScaleSecondController是fromVc，TTScaleFirstController是toVc<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/qiniufrom&amp;to.png\" alt=\"\"></li>\n<li>在导航push过程中，将fromVc视图的scale从1设置到0.7，将toVc视图的frame从屏幕右方移动到屏幕中间</li>\n</ul>\n<p>过场的动画，需要在<code>UIViewControllerAnimatedTransitioning</code>提供的</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span></span><br></pre></td></tr></table></figure>\n<p>方法内实现，方法中的过场上下文<code>transitionContext</code>，会提供设置动画的所需的各个对象<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用对应key取得相应控制器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)\t<span class=\"comment\">// 根据另一协议方法获得过场时间</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> containerView = transitionContext.containerView()\t<span class=\"comment\">// 过场容器视图</span></span><br></pre></td></tr></table></figure></p>\n<p>过场上下文提供了一个容器视图<code>containerView</code>，在过场过程中，这个视图就相当一个舞台，fromVc和toVc的View可以在容器内做各种动画，首先我们需要准备一下舞台<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">containerView?.addSubview(toVc!.view)\t<span class=\"comment\">// 默认fromVc的视图已经加入容器内</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> screenW = <span class=\"type\">UIScreen</span>.mainScreen().bounds.width</span><br><span class=\"line\"><span class=\"keyword\">let</span> screenH = <span class=\"type\">UIScreen</span>.mainScreen().bounds.height</span><br><span class=\"line\">toVc?.view.frame = <span class=\"type\">CGRectMake</span>(screenW, <span class=\"number\">0</span>, screenW, screenH)</span><br></pre></td></tr></table></figure></p>\n<p>设置好toVc的视图位置后，就开始正式的动画设置了<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    fromVc?.view.transform = <span class=\"type\">CGAffineTransformMakeScale</span>(<span class=\"number\">0.7</span>, <span class=\"number\">0.7</span>) <span class=\"comment\">// fromVc视图的scale设置到0.7</span></span><br><span class=\"line\">    toVc?.view.frame = <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, screenW, screenH)\t<span class=\"comment\">// toVc视图从屏幕右方移动到屏幕中间</span></span><br><span class=\"line\">    &#125;) &#123; (<span class=\"number\">_</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，在动画结束时，必须调用<code>transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</code>来清理舞台，如果传入一个<code>true</code>好像也没有问题，但是在加入右划返回手势，滑动一半取消时，就会出现问题，因此需要根据过场是否被取消来正确清理过场上下文</p>\n<h5 id=\"4-更改导航的方式\"><a href=\"#4-更改导航的方式\" class=\"headerlink\" title=\"4. 更改导航的方式\"></a>4. 更改导航的方式</h5><p>完成上面三步，我们就写好了过场的剧本，接下来就得请演员<code>TTScaleNavigationController</code>上台表演了<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTScaleNavigationController</span>: <span class=\"title\">UINavigationController</span>, <span class=\"title\">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (operation == .<span class=\"type\">Push</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">TTPushTransition</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在UINavigationControllerDelegate的方法中，设置push状态的过场是写好的”剧本”，编译运行一次，push的动画已经像模像样了，不过好像只会生效一次o(╯□╰)o，需要完善pop的动画</p>\n<h5 id=\"5-设置pop的动画\"><a href=\"#5-设置pop的动画\" class=\"headerlink\" title=\"5. 设置pop的动画\"></a>5. 设置pop的动画</h5><p>设置pop动画的流程跟push类似，也需要新建一个遵守<code>UIViewControllerAnimatedTransitioning</code>的NSObject类，唯一不同的是设置动画，但实际上也就是push动画的逆向，这里就直接贴上代码了<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTPopTransition</span>: <span class=\"title\">NSObject</span>, <span class=\"title\">UIViewControllerAnimatedTransitioning</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">transitionDuration</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class=\"type\">NSTimeInterval</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">animateTransition</span><span class=\"params\">(transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> containerView = transitionContext.containerView()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> fromVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextFromViewControllerKey</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> toVc = transitionContext.viewControllerForKey(<span class=\"type\">UITransitionContextToViewControllerKey</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> duration = <span class=\"keyword\">self</span>.transitionDuration(transitionContext)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> screenW = <span class=\"type\">UIScreen</span>.mainScreen().bounds.width</span><br><span class=\"line\">        <span class=\"keyword\">let</span> screenH = <span class=\"type\">UIScreen</span>.mainScreen().bounds.height</span><br><span class=\"line\"></span><br><span class=\"line\">        containerView?.addSubview(toVc!.view)</span><br><span class=\"line\">        containerView?.sendSubviewToBack(toVc!.view)</span><br><span class=\"line\">        <span class=\"type\">UIView</span>.animateWithDuration(duration, animations: &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            fromVc?.view.frame = <span class=\"type\">CGRectMake</span>(screenW, <span class=\"number\">0</span>, screenW, screenH)</span><br><span class=\"line\">            toVc?.view.transform = <span class=\"type\">CGAffineTransformMakeScale</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;) &#123; (<span class=\"number\">_</span>) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                transitionContext.completeTransition(!transitionContext.transitionWasCancelled())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后完善一下<code>TTScaleNavigationController</code>的协议方法，补充pop状态需要的过场<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController)</span></span> -&gt; <span class=\"type\">UIViewControllerAnimatedTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (operation == .<span class=\"type\">Push</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTPushTransition</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> operation == .<span class=\"type\">Pop</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">TTPopTransition</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次运行项目，导航的过场已经基本完善了，已经拥有了想象动画，但是！！！</p>\n<h5 id=\"6-右划返回手势\"><a href=\"#6-右划返回手势\" class=\"headerlink\" title=\"6. 右划返回手势\"></a>6. 右划返回手势</h5><p>重写了导航控制器之后，右划手势就失效了，需要手动添加手势😔</p>\n<p>回到<code>TTScaleNavigationController</code>中，手势需要一个新的对象来记录手势状态，并且这个对象最终会通知导航进行相应操作，添加<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> interactivePopTransition: <span class=\"type\">UIPercentDrivenInteractiveTransition</span>?</span><br></pre></td></tr></table></figure></p>\n<p>然后在<code>viewDidLoad</code>方法中添加边缘手势<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> popRecognizer = <span class=\"type\">UIScreenEdgePanGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: <span class=\"string\">\"handlePopRecognizer:\"</span>)</span><br><span class=\"line\">popRecognizer.edges = .<span class=\"type\">Left</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.view.addGestureRecognizer(popRecognizer)</span><br></pre></td></tr></table></figure></p>\n<p>记得补充手势的响应方法，这里使用了Swift的<code>switch</code>特性来判断状态并记录状态<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handlePopRecognizer</span><span class=\"params\">(recognizer: UIScreenEdgePanGestureRecognizer)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取手势在屏幕横屏范围的滑动百分比，并控制在0.0 - 1.0之间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> progress = recognizer.translationInView(<span class=\"keyword\">self</span>.view).x / <span class=\"keyword\">self</span>.view.bounds.width</span><br><span class=\"line\">    progress = <span class=\"built_in\">min</span>(<span class=\"number\">1.0</span>, <span class=\"built_in\">max</span>(<span class=\"number\">0.0</span>, progress))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> recognizer.state &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Began</span>:    <span class=\"comment\">// 开始滑动：初始化UIPercentDrivenInteractiveTransition对象，并开启导航pop</span></span><br><span class=\"line\">        interactivePopTransition = <span class=\"type\">UIPercentDrivenInteractiveTransition</span>()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.popViewControllerAnimated(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Changed</span>:  <span class=\"comment\">// 滑动过程中，根据在屏幕上滑动的百分比更新状态</span></span><br><span class=\"line\">        interactivePopTransition?.updateInteractiveTransition(progress)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Ended</span>, .<span class=\"type\">Cancelled</span>:    <span class=\"comment\">// 滑动结束或取消时，判断手指位置，在左半屏幕取消pop，在右半屏幕完成pop过程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> progress &gt; <span class=\"number\">0.5</span> &#123;</span><br><span class=\"line\">            interactivePopTransition?.finishInteractiveTransition()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            interactivePopTransition?.cancelInteractiveTransition()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        interactivePopTransition = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后，还要把我们记录下来的<code>UIPercentDrivenInteractiveTransition</code>对象通知给导航控制器<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">navigationController</span><span class=\"params\">(navigationController: UINavigationController, interactionControllerForAnimationController animationController: UIViewControllerAnimatedTransitioning)</span></span> -&gt; <span class=\"type\">UIViewControllerInteractiveTransitioning</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> interactivePopTransition</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>终于，一个自定义过场方式的导航控制器就完活儿了😉</p>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><h5 id=\"1-添加阴影\"><a href=\"#1-添加阴影\" class=\"headerlink\" title=\"1. 添加阴影\"></a>1. 添加阴影</h5><p>为toVc的视图添加左侧的阴影，提高两个视图的层次感<br><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/custom_navigation_transition/shadow.jpeg\" alt=\"\"><br>在<code>TTPushTransition</code>的动画设置方法中，添加<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// shadows</span></span><br><span class=\"line\">toVc?.view.layer.shadowOffset = <span class=\"type\">CGSizeMake</span>(-<span class=\"number\">3</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">toVc?.view.layer.shadowColor = <span class=\"type\">UIColor</span>.blackColor().colorWithAlphaComponent(<span class=\"number\">0.3</span>).<span class=\"type\">CGColor</span></span><br><span class=\"line\">toVc?.view.layer.shadowOpacity = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2-渐亮渐暗效果\"><a href=\"#2-渐亮渐暗效果\" class=\"headerlink\" title=\"2. 渐亮渐暗效果\"></a>2. 渐亮渐暗效果</h5><p>为fromVc提供push渐暗，pop渐亮的效果</p>\n<p>思路是在fromVc和toVc的视图中间，插入一层黑色的view，并调节这一view的透明度，在<code>TTPushTransition</code>的动画设置方法中，在动画开始前插入蒙版视图<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> blackView = <span class=\"type\">UIView</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, screenW, screenH))</span><br><span class=\"line\">blackView.backgroundColor = <span class=\"type\">UIColor</span>.blackColor()</span><br><span class=\"line\">blackView.alpha = <span class=\"number\">0</span></span><br><span class=\"line\">containerView?.insertSubview(blackView, belowSubview: toVc!.view)</span><br></pre></td></tr></table></figure></p>\n<p>在动画中，设置<code>blackView.alpha = 0.7</code>并在动画结束时<code>blackView.removeFromSuperview()</code><br>pop过程自然就是一个相反的过程了，同样插入一个蒙版透明度从0.7到0</p>\n<h5 id=\"3-优化参数\"><a href=\"#3-优化参数\" class=\"headerlink\" title=\"3. 优化参数\"></a>3. 优化参数</h5><p>记得修改动画时间到0.3，fromVc视图的scale为0.95 😜</p>\n<hr>\n<p><strong>如果你也喜爱游戏，欢迎支持我的APP</strong>  <a href=\"https://itunes.apple.com/app/id986716705\" target=\"_blank\" rel=\"noopener\">Up 游戏专辑</a></p>\n<p><img src=\"https://up-app.oss-cn-hangzhou.aliyuncs.com/blog/2016/upmer_qrcode.png\" alt=\"\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjannaza600071rnrbtk1oaa5","category_id":"cjannaz9z00041rnrb6v8wtbf","_id":"cjannazah000b1rnrnvmelksc"},{"post_id":"cjannaz9o00001rnru42uyupy","category_id":"cjannaz9z00041rnrb6v8wtbf","_id":"cjannazai000d1rnrmurbrqbx"},{"post_id":"cjannaz9v00021rnrmxuqmnp5","category_id":"cjannaz9z00041rnrb6v8wtbf","_id":"cjannazai000e1rnrlks4copw"},{"post_id":"cjannaza300051rnrwe9xhzcf","category_id":"cjannazah000c1rnrg6ap1ct4","_id":"cjannazaj000g1rnrn7pdo64x"},{"post_id":"cjannaza700081rnrhbiu8pf6","category_id":"cjannazai000f1rnr49l3322n","_id":"cjannazal000i1rnrhyarlxsh"},{"post_id":"cjannazac000a1rnr2onlpjtc","category_id":"cjannazai000f1rnr49l3322n","_id":"cjannazam000j1rnr1cl8njch"}],"PostTag":[],"Tag":[]}}